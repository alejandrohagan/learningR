{
  "hash": "c870738b4719be2f71cbbd9e5bcdfe43",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Database and Larger Than Memory Problems\"\nhtml:\n  code-fold: \"show\"\n---\n\n\n\n\n# Resource\n\n[Resource to understand databases](https://smithjd.github.io/sql-pet/chapter-setup-adventureworks-db.html#)\n\n[R for datascience chapter on database](https://r4ds.hadley.nz/databases.html)\n\n[Dbplyr functions](https://dbplyr.tidyverse.org/articles/translation-function.html)\n\n[How to use duckdb](https://bwlewis.github.io/duckdb_and_r/talk/talk.html)\n\n[DBI function overivew](https://dbi.r-dbi.org/)\n\n[Posit learning materials](https://solutions.posit.co/connections/db/)\n\n[dbplot_histogram](https://edgararuiz.github.io/dbplot/)\n\n\n\n# Why is this important?\n\n-   You will get to a point where the data you need is inside a database and \nnot excel sheets or csv files \n\n-   This is a point of potential rejoice or mourning\n\n-   While we can say goodbye excel sheets and csv files we also need to say hello \nto poorly documented databases, overwhelmed database product owners,\noverworked data engineers, and finally SQL and all of its variations\n\n-   I recommend you take the time to learn SQL -- the basics are very\nsimilar to the dplyr commands you already know (slight tweaking of \nevaluation order and syntax) so the beginners learning curve isn't steep\n\n:::{.callout-note collapse=\"true\"}\n\n## How much SQL should I learn?\n\nIf you're curious how much SQL you should learn, below is a framework that I\nfound to be helpful, with their R equivalent\n\n    \n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"maakzmcpaq\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#maakzmcpaq table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#maakzmcpaq thead, #maakzmcpaq tbody, #maakzmcpaq tfoot, #maakzmcpaq tr, #maakzmcpaq td, #maakzmcpaq th {\n  border-style: none;\n}\n\n#maakzmcpaq p {\n  margin: 0;\n  padding: 0;\n}\n\n#maakzmcpaq .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#maakzmcpaq .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#maakzmcpaq .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#maakzmcpaq .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#maakzmcpaq .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#maakzmcpaq .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#maakzmcpaq .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#maakzmcpaq .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#maakzmcpaq .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#maakzmcpaq .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#maakzmcpaq .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#maakzmcpaq .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#maakzmcpaq .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#maakzmcpaq .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#maakzmcpaq .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#maakzmcpaq .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#maakzmcpaq .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#maakzmcpaq .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#maakzmcpaq .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#maakzmcpaq .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#maakzmcpaq .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#maakzmcpaq .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#maakzmcpaq .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#maakzmcpaq .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#maakzmcpaq .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#maakzmcpaq .gt_left {\n  text-align: left;\n}\n\n#maakzmcpaq .gt_center {\n  text-align: center;\n}\n\n#maakzmcpaq .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#maakzmcpaq .gt_font_normal {\n  font-weight: normal;\n}\n\n#maakzmcpaq .gt_font_bold {\n  font-weight: bold;\n}\n\n#maakzmcpaq .gt_font_italic {\n  font-style: italic;\n}\n\n#maakzmcpaq .gt_super {\n  font-size: 65%;\n}\n\n#maakzmcpaq .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#maakzmcpaq .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#maakzmcpaq .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#maakzmcpaq .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#maakzmcpaq .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#maakzmcpaq .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#maakzmcpaq .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style>Summary of SQL commands and their dplyr counterpart</td>\n    </tr>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"SQL\">SQL</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"dpylr\">dpylr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"comment\">comment</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">WHERE</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">filter()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">Pass arguments with AND or OR,\nSometimes the first argument is TRUE for purely formatting purposes</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">SELECT</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">select()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">* is short cut for all columns\nseperate multiple columns with a comma</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">GROUP BY</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">group_by()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">seperate multiple columns with a comma</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">SUM</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">sum()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works the same as sum, na.rm is always TRUE for SQL</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">MIN</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">min()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works the same as min, na.rm is always TRUE for SQL</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">MAX</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">max()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works the same as max, na.rm is always TRUE for SQL</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">COUNT(*)</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">n()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">wworks same as n()</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">DISTINCT</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">distinct()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">SELECT DISTINCT</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">select() |&gt; distinct()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">specify the columns you want</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">PARTITION</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">group_by() |&gt; mutate()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">you will need to specify which colums you want with OVER() and BY()</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">LEFT JOIN</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">left_join()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">Uses ON to join conditions</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">LIKE</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">str_detect()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works with WHERE, % is wildcard</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">TOP</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">head()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">work the same as TOP</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">DESCRIBE</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">glimpse()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works simliar, will display the columns and thier data types</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">SET</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\"> &lt;- </td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works simliar to assign for a single variables</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">BETWEEN</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">between()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">VAR BETWEEN X AND Y</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">MONTH</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">month()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">YEAR</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">year()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">DAY</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">day()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">QUARTER</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">quarter()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">DATEDIFF</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">difftime() </td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">DATETRUC</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">floor_date()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar, can input minute, hour, day, week, month, quarter, year, etc</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">CREATE OR REPLACE</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">tibble()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">conceptually the same, but use this to create the final table</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">IN</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\"> %in%</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">works similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">AS</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">rename()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">work similar</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">WITH</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">tibble()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">Use this to create CTE or basic mini tables that you can then reference in different steps of the query, makes readable easier</td></tr>\n    <tr><td headers=\"sql\" class=\"gt_row gt_left\">HAVING</td>\n<td headers=\"dpylr\" class=\"gt_row gt_left\">filter()</td>\n<td headers=\"comment\" class=\"gt_row gt_left\">Similiar to WHERE, but must be used with aggregated measures</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n    \nThere are some nuances, in particular the evaluation order and  coding conventions that typically trip up new SQL users but in general if you understand the above R commands you will quickly learn the SQL counterparts.\n\nWith anything, you need to practice! luckily there are multiple SQL resources and practice studios which can help with reinforcement learning.\n:::\n\n\n-   The reason you can survive off of a beginners knowledge base of SQL is that\nluckily there is a life saving package called `dbplyr` that translates your \ndplyr queries into SQL for you\n\n-   It has fairly great coverage but there are limitations which is why \neventually it will help you to learn some intermediate SQL commands and \noverall database frameworks\n\n-   This chapter will go over database essentials and provide resources to\nlearn more\n\n## The Essentials\n\n**What do you need to access data in a database?**\n\n-   A database with data inside of it  \n-   Access / permission to the database\n-   Location, user name and password to database (or equivalent protocols as \ndictated by your organization's security model)\n-   Database driver and related utilities\n-   SQL querys\n-   Patience\n\n\n::: {.callout-note collapse=\"true\"}\n\n## \"What is the advantage of a database?\" \n\nIt comes down to scale and size. At some point your organization or process\nwill generate substantial data and needs a more structured process to store\nthe data so that multiple parties can access the data at scale.\n\nWhen dealing with a new database some key frameworks are:\n\n- Cloud vs. On-Premise\n- Security model and access\n- \"Flavor\" of database\n\n\n- Improved data management: A database centralizes data, making it \neasier to manage and maintain\n\n- Enhanced data security: A database provides secure storage and \nretrieval of sensitive data through user authentication and access \ncontrol mechanisms\n\n- Better data organization: A database **theoretically** allows for better organization \nand structure of data through the use of tables, indexes, and \nrelationships\n\n- Improved query performance: Databases are optimized for query \nperformance, allowing for faster retrieval of data.\n\n\n- Scalability: Databases can handle large amounts of data and scale as \nneeded to meet growing storage demands.\n\nCloud vs On-Premise Database:\n\n- Cloud databases are hosted on remote servers, while on-premise \ndatabases are hosted on local servers (when you read servers just replace it with the word computers. You are either using your organization's computer (on prem) or you are using someone else (cloud))\n\n- Cloud databases offer greater flexibility in terms of scalability and\naccessibility, as they can be accessed from any location with an \ninternet connection.\n\n- On-premise databases provide more control over data security and \nprivacy, as the data is stored on a local server and not transmitted \nover the internet.\n\n- Cloud databases typically require less setup and maintenance than \non-premise databases, as they are managed by the provider.\n\n- Cost: Cloud databases are often subscription-based and can be more \ncost-effective than on-premise databases, especially for small to \nmedium-sized businesses.\n\n*Security Model and Access:*\n\n- Security model: A database's security model determines who has access\nto the data and how they can access it. Common security models include \nRole-Based Access Control (RBAC), Attribute-Based Access Control (ABAC),\nand Identity-Based Access Control (IBAC).\n\n- Access control: A database's access control mechanisms determine who \ncan view, edit, or delete data. This can be based on user \nauthentication, role-based access control, or attribute-based access \ncontrol.\n\n\n- Authentication methods: Databases support various authentication \nmethods such as username and password, single sign-on (SSO), and \ntwo-factor authentication (2FA).\n\n- Authorization methods: Databases support various authorization \nmethods such as row-level security, column-level security, and \ntable-level security.\n\n- Auditing and logging: Databases can log all access attempts and \nsuccessful accesses to track user activity and detect potential security\nbreaches.\n\n- Encryption: Databases can encrypt data both in transit and at rest to\nprotect it from unauthorized access.\n\n- Backup and recovery: Databases provide mechanisms for backing up data\nand recovering from failures or security incidents.\n\n- Identity and access management (IAM): IAM systems manage user \nidentities and access rights within the database, ensuring that only \nauthorized users can access the data.\n\n- Role-based access control (RBAC): RBAC allows for assigning roles to \nusers based on their job function or responsibilities, limiting the data\nthey have access to.\n\n- Attribute-based access control (ABAC): ABAC grants or denies access \nto data based on attributes associated with the user or the data itself,\nsuch as location or time of day.\n\n:::\n\n\n**What does a database need from you?**\n\n-   The most frustrating part of database is getting access to the database,\nsetting up the database utilities and then making the initial connection\n\n-   There are multiple ways to connect to a database however  almost all\nrequire the following:\n    -   User name\n    -   Password\n    -   Database driver\n    -   Connection string and associated arguments\n    -   SQL query\n\n-   We will review the DSN method for connecting to a database\n\n-   These tend to be confusing because much of this is controlled and managed\nby your local IT department so whatever documentation or guide you read on \nonline may not translate one for one to your localized experienced (this \nincludes this guide as well :(\n\n## Set up ODBC Driver\n\n-   Download (if required) a database driver for your database -- this is\ntypically on the database company's website\n\n    -    Your company may have centralized package manager system where you\n    will need to download and install all required drivers via that packet \n    manager\n\n-   Configure your DSN so that you can be authenticated\n\n-   Your database platform should have documentation on how to do this and \nyour internal IT team **should** be able to articulate any proxy / security \nrequirements\n\n-   Here is some example\n[documentation](https://docs.snowflake.com/en/developer-guide/odbc/odbc-windows)\n\n-   You are essentially saving the required information (listed above)\nto your computer so that you can pass these arguments to the database\n\n-   Pay attention to the name you setup the DSN driver, you will need this\nlater one\n\n**Example Paramaters are below**\n\n-   User\n-   Password\n-   Server\n-   Database\n-   Schema\n-   Warehouse      \n-   Tracing\n-   Authenticator\n  \n\n## Create Connection String\n\n-   If the above is done correctly you can then use DBI package in R \nto connect to the database of your choice\n\n-  Create a connection string with DBI::dbConnect()\n\n      -   Select the DBMS wtih the driver_name such as ODBC::ODBC() \n            to access your DSN set up connect to external database or can use\n            DMBS package such as duckdb::duckdb() to replicate an internal \n            instance of a database\n\n      -   DSN name if external database (the name used to set up ODBC driver)\n\n      -   Alternatively, you can directly supply the arguments \n            in DBI::dbConnect() such as hostname,port,username, etc\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n## this uses duckdb example to create a connection string\n\ncon <- DBI::dbConnect(drv=duckdb::duckdb())\n\n## this is alternative example using a made up DSN name \n\ncon  <- DBI::dbConnect(\n  drv=odbc:odbc()\n  ,dsn=\"your_DSN_name\" \n  )\n```\n:::\n\n\n\n::: {.callout-note collapse=\"true\"}\n\n## Additional Utilities\n\n-   the DBI and ODBC packages are extremely useful for database related \nutilities\n-   While they have some existing overlap, they can be used to view the \nschema in your database, list active connections and also disconnect.\n-   Below are some useful utilities:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  \n  ~name                      ,~purpose\n  ,\"odbc::odbcListDrivers()\",\"list your drivers\"\n  ,\"DBI::dbListConnections()\",\"as you create connections with dbConnect(), this wil list active connections\"\n  ,\"DBI::dbCanConnect()\",\"checks if you can connect to tables\"\n  ,\"DBI::dbListTables()\",\"lists tables associated with the connection\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  name                     purpose                                              \n  <chr>                    <chr>                                                \n1 odbc::odbcListDrivers()  list your drivers                                    \n2 DBI::dbListConnections() as you create connections with dbConnect(), this wil…\n3 DBI::dbCanConnect()      checks if you can connect to tables                  \n4 DBI::dbListTables()      lists tables associated with the connection          \n```\n\n\n:::\n:::\n\n\n:::\n\n## Are all tables equal?\n\n\n\n**Database frameworks**\n\n\n-   Temporary Tables / CTE\n    \n    -   These are tables that only exist when you run them\n    -   Helpful as interim steps or to break code into subqueries to make it more modular\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nWITH TEMP AS (\n\nSELECT \nCUT\n,MEAN(PRICE) AS AVG_PRICE\n,COUNT(*) AS N\n\nFROM\nDIAMOND_DB\n\nGROUP BY\nCUT\n\n)\n\nSELECT *\nFROM\nDIAMOND_DB AS MAIN\n\nLEFT JOIN\nTEMP ON MAIN.CUT=TEMP.CUT\n\n)\n\n```\n:::\n\n\n-   Curated tables\n    \n    -   Often times you may have loads of raw tables (eg 100s) that you need to join together, filter or aggregrate before the data can be usable\n    -   This process of turning raw /streaming data into table that can be consumed for analysis is oftern called data curation\n    -   This is often times created as a view which can be though of as particular snapshot of a table \n    \n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE VIEW DiamondSummaryView AS\nWITH TEMP AS (\n    SELECT \n        CUT,\n        MEAN(PRICE) AS AVG_PRICE,\n        COUNT(*) AS N\n    FROM\n        DIAMONDS_DB\n    GROUP BY\n        CUT\n)\nSELECT *\nFROM\n    DIAMONDS_DB AS MAIN\nLEFT JOIN\n    TEMP ON MAIN.CUT = TEMP.CUT;\n```\n:::\n\n    \n    \n    \n-   Materialized layers\n    \n    -   Materialized layer means the data is more persistent so when you run it its not triggering the underlying queries (which will save you alot of time)      \n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE MATERIALIZED VIEW DiamondSummaryMaterializedView AS\nWITH TEMP AS (\n    SELECT \n        CUT,\n        MEAN(PRICE) AS AVG_PRICE,\n        COUNT(*) AS N\n    FROM\n        DIAMONDS_DB\n    GROUP BY\n        CUT\n)\nSELECT *\nFROM\n    DIAMONDS_DB AS MAIN\nLEFT JOIN\n    TEMP ON MAIN.CUT = TEMP.CUT;\n\n```\n:::\n\n\n\n**Database structure**\n\n-   Security Model\n\n    -   Because data can be privileged, without a doubt your organization has some security model that will aplly row level security and IDs to ensure when you access a table you are seeing what you should be seeing\n    -    There is way to  much to write here about it and honestly, I'm not the right person to answer it\n  \nYou may not need to know any of this but this mostly depends on your organizations\ndata strategy, staffing levels and operating model\n\n\nDBI::dbCanConnect()\n\n## List tables listed under connection\n\n\n\n### list tables in connection\n`dbListTables(con)` to list tables associated with a connection\n\n:::\n\n-   After you have created a connection string you now need to retrieve \ninformation from the database\n\n   \n## Option 1: Create SQL string\n\n-   If you know the database, schema and table name that you want, you can \nwrite the initial sql query to connect to the database\n\n-   You can write simple or advance query insde the  `dplyr::sql()` function \n        \n\n::: {.cell}\n\n```{.r .cell-code}\nsql_query <- dplyr::sql(\"select *  from database_name\")\n```\n:::\n\n\n## Accessing Databse\n\n-   Use connection string and sql query together to create a lazy table with `dplyr::tbl()`\n-   We call this a lazy table because it won't actually execute the query and \nreturn the results which is good because your query might return 100s of results\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_db <- dplyr::tbl(con,sql_query)\n```\n:::\n\n\n-   From there you can use *dplyr* back end queries to see everything \n(notice the distinction between **db**pyr and dplyr\n\n-   If you use the dbplyr package, you are limited to queries that can \nbe translated to sql which are detailed below\n    -   [github of dplyr commands that can be used in dbplyr](https://github.com/tidyverse/dbplyr/blob/main/R/backend-.R)\n    -   You can also check the database specific[here]([https://github.com/tidyverse/dbplyr/blob/main/R/backend-snowflake.R)\n-   You can see what query it will generate with `dbplyr::show_query()`\n-   Notice the class of the object you return, you are returning a database \nobject -- if you want to return a dataframe you need to use  `dplyr::collect()`\n\n\n## Option 2: Push existing data into a database\n\n-   First you need to have a connection string to a database (and write permissions)\n    \n-   If you already have something as a dataframe you can upload it to a \ndatabase with DBI::dbWriteTable(con,\"tbl_name\",df) which will write the table \nto the connection with the name you gave \n\n    -   DBI::dbWriteTable() can write a r dataframe or you can use sql to create a virtual table if you want\n    -   dbplyr::copy_inline(con_db,df = df) is alternative method\n    -   If you have duckdb connection you can use the duckdb::duckdb_register()\n\n::: {.cell}\n\n```{.r .cell-code}\n# create connection\ncon_db <- DBI::dbConnect(duckdb::duckdb())\n\n# write data into database\nDBI::dbWriteTable(con_db,name = \"diamonds_db\",value = ggplot2::diamonds)\n\n# or alternative use the database argument to regester\nduckdb::duckdb_register(con_db, \"diamonds_db_2\",df =  ggplot2::diamonds)\n\n# validate data is in database by reference connection\nDBI::dbListTables(con_db)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"diamonds_db\"   \"diamonds_db_2\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Pull in data in database format\ndiamonds_db <- dplyr::tbl(con_db,\"diamonds_db\")\n```\n:::\n\n\n\n\n\n\n## What happens if dbplyr doesn't have a function that I need?\n\n-   This will happen, take for example if you want to do the ceiling date of date column (eg. round 2024-01-05 to 2024-01-31)\n-   \n\n### built in helper functions\n\n-   translate_sql()\n\n### create sql query and use it\n\n\n    Use a parameterised query with dbSendQuery() and dbBind()\n    Use the sqlInterpolate() function to safely combine a SQL string with data\n    Manually escape the inputs using dbQuoteString()\nhttps://solutions.posit.co/connections/db/best-practices/run-queries-safely/\n\n\n## how can I build a package for this?\n\nbuild_sql()\n\nairport <- dbSendQuery(con, \"SELECT * FROM airports WHERE faa = ?\")\n\nUse dbBind() to execute the query with specific values, then dbFetch() to get the results:\n\ndbBind(airport, list(\"GPT\"))\ndbFetch(airport)\n\nOnce you’re done using the parameterised query, clean it up by calling dbClearResult()\n\ndbClearResult(airport)\n\n\n\n## Putting it all together\n\n-   Set up your drive, get required database info and related utilities\n-   Create connection to your database\n-   write an inital query to select the columns that you want or need\n-   Use dbplyr to translate dplyr queries to SQL\n-   return results to your local machine with dplyr::collect()\n\n# Larger than memory problems\n\n-   Sometimes you don't have a database but have data that is larger than\nmemory\n-   Luckily, you don't need a database to take advantage of the tricks we have \nlearnt to move solve your data larger than memomory problems\n\n\n-   Sometimes you may not have a database to connect to and instead have a \nvery large csv file or dataframes\n-   There are two packages that are exceptionally helpful here\n    -   duckdb() and arrow()\n-   This isn't the technically correct response but duckdb() allows you to build\nan in memory database whereas arrow compresses your information into some sort \nof parquet type structure\n\n-   What makes these so great is that dbplyr will translate your dplyr commands\nto either duckdb or arrow language\n-   Some dplyr functions are avaialble in one package that aren't avaialble in \nthe other\n-   However you can pass an object from duckdb to arrow as much as you want\n\n**What is key difference?**\n\n-   Duckdb will return first 1000 rows of your query so you can check if your\nquery worked well, whereas arrow won't let you see it (including if your query\nreturns an error which can be annoying)\n\n\nTo understand how to use the packages,let us define two scenarios: \n\n1) You have a lot of csv files that you need to upload and analyze\n2) As a result of simulation of some other you have multiple tables that \nseperately are okay but together are generating you have very large\ndataframe that you need to join together to  analyze and manipulate\n3) You have interim data that you want to save in workflow that is large\n\n### Large csv files that you need to work with:\n\n-   If you have large offline files you can quickly easily load this into \nduckdb with `duckdb_read_csv()` or the collection of arrow functions \n(eg. `arrow::read_csv_arrow()`).\n\n\n::: .callout-note\n\nArrow will support json, feather, delimiter, parquet, or csv amongst other \nwhereas duckdb only supports csv (if not already an object) \n:::\n\n-   This will load the csv files directly to your duck db in memory database\n-   You first need to create connection string\n\n### Existing dataframes (however they got there) that are either too large\nor individually are okay but seperately aren't okay\n   \n-   You first need to get your data into R as a dataframe \n-   Then you need to register your dataframe to your in duckdb memory database\n-   From there you can move the datafrme from duckdb to arrow as you would like\n\n\n\n# Special tricks\n\n##  You can pass one database object to duckdb\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: db-connect example\n#| eval: true\n\n## create connection string locally\ncon_db <- DBI::dbConnect(duckdb::duckdb())\n\n# loads data into your connection either in memory\nDBI::dbWriteTable(con_db,\"diamonds_db\",ggplot2::diamonds)\n\n#create new table to the connection\n\nDBI::dbExecute(con_db, \"CREATE TABLE duckdb_table (col1 INT, col2 STRING)\")\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n#preview what is in your connection\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbListTables(con_db)\n\ndbplyr::copy_inline(con_db,df = diamonds)\n\n\ndiamonds_db <- dplyr::tbl(con_db\n    ,\"diamonds_db\"\n    )\n```\n:::\n\n\n\n# Example of passing one database object to arrow\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds_db %>% \n  \n  mutate(good_indicator=if_else(cut==\"Good\",1,0)) %>%\n  group_by(color) %>% \n  summarise(\n    n=n()\n    ,mean=mean(carat)\n    ,mean_price=mean(price)\n    ,mean_ind=mean(good_indicator)\n    ,mean_adj=mean(carat[good_indicator==1])\n  ) %>% \n\n  arrange(desc(color)) %>% \n  mutate(rolling_price=cumsum(mean_price)) %>% \n    arrow::to_arrow() %>% \n  ungroup() %>% \n filter(color==\"H\") %>% \n  select(color,mean_adj) %>% \n  collect()\n```\n:::\n\n\n# Additional tricks\n\n### Running SQL in R\n\n-   If you are using rmakrdown or quarto, you can run the sql query in a window\nand have it results saved as a datafarme\n\n\n::: {.cell output.var='test.tbl'}\n\n````{.cell-code}\n```{{sql}}\n--| eval: false\n--| connection: con_db\n--| output.var: test.tbl\n\nSELECT * \n\nFROM diamonds_db\n\nWHERE cut=='Good'\n\nLIMIT 100\n\n```\n````\n:::\n\n\n-   If you want to run it in rmarkdown, you can do the following\n\n\n::: {.cell output.var='mydataframe'}\n\n````{.cell-code}\n```{{sql, eval=FALSE,connection=con_db, output.var = \"mydataframe\"}}\nSELECT * \n\nFROM diamonds_db\n\nWHERE cut=='Good'\n\nLIMIT 100\n\n```\n````\n:::\n\n\n\n\n\n## How to plot a database object\n\nrm package\npool\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dm)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dm'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n```{.r .cell-code}\ndm <- dm_nycflights13()\n\ndm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n── Metadata ────────────────────────────────────────────────────────────────────\nTables: `airlines`, `airports`, `flights`, `planes`, `weather`\nColumns: 53\nPrimary keys: 4\nForeign keys: 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndm %>%\n  dm_draw()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"grViz html-widget html-fill-item\" id=\"htmlwidget-0bee972c2dd56ddc4f95\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0bee972c2dd56ddc4f95\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=LR tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, ]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"airlines\\\" [id = \\\"airlines\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">airlines<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"carrier\\\"><U>carrier<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"airports\\\" [id = \\\"airports\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">airports<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"faa\\\"><U>faa<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"flights\\\" [id = \\\"flights\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#3C678EAA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#5B9BD5FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">flights<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"carrier\\\">carrier<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"tailnum\\\">tailnum<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"origin\\\">origin<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#DEEBF6FF\\\" PORT=\\\"origin, time_hour\\\">origin, time_hour<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes\\\" [id = \\\"planes\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#9E5320AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#ED7D31FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">planes<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FBE5D5FF\\\" PORT=\\\"tailnum\\\"><U>tailnum<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"weather\\\" [id = \\\"weather\\\", label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#4A732FAA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#70AD47FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">weather<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#E2EEDAFF\\\" PORT=\\\"origin, time_hour\\\"><U>origin, time_hour<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"flights\\\":\\\"carrier\\\"->\\\"airlines\\\":\\\"carrier\\\" [id=\\\"flights_1\\\"]\\n\\\"flights\\\":\\\"origin\\\"->\\\"airports\\\":\\\"faa\\\" [id=\\\"flights_2\\\"]\\n\\\"flights\\\":\\\"tailnum\\\"->\\\"planes\\\":\\\"tailnum\\\" [id=\\\"flights_3\\\"]\\n\\\"flights\\\":\\\"origin, time_hour\\\"->\\\"weather\\\":\\\"origin, time_hour\\\" [id=\\\"flights_4\\\"]\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/grViz-binding-1.0.11/grViz.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}