{
  "hash": "7c4d07e3a42aad594e63e9928a1af576",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"github\"\n---\n\n\n## Resources\n\n-   https://raps-with-r.dev/git.html\n-   https://happygitwithr.com/\n-   https://learngitbranching.js.org/?locale=en_US\n\n\n# summary\n\n-   Git is file versioning system that allows users to track additions, \ndeletions, and modifications to file.\n\n-   It is has many advantages relative to a traditional file save in that\nyou can walk up and down the various \"states\" of your file allowing \ncollaborators to transparently see coding modifications\n\n-   As with any new framework -- it takes time to learn the nuances, best \npractices and other pitfalls before this workflow becomes useful\n\n-   Consistent with learning any new skill, this will be your journey\n    \n    -   Incredible frustration to initiate, setup and connect your code  base\n    to your git repository\n    -   High learning curve to adopt basic workflow \n    -   Excitement after basic workflow works\n    -   Insane frustration when you need do something other than your basic\n    workflow because now you have high learning curve to learn intermediate and \n    even advanced skills\n    -   Confidence in using git and you are now saving time and energy to \n    offset your initial investment\n    -   Destroyed confidence when you realize you can't do what you thought\n    was a basic task\n    -   Repeat cycle\n\n# How does it work?\n\n-   You are essentially pushing a version of your file /data to the cloud so\nthere exists two version -- one on your local machine and another in the cloud\n\n-   You work on your local machine, and \"push\" your work via \"commits\" to cloud\n\n-   Then when you start a new session, you \"pull\" the version from the cloud\nand continue your work, edits / deletions \n\n\n# Introduction\n\n-   Create your git account on one of the git sites (eg. github, gitlab or \ngitbucket)\n\n-   It is often times easier to create your first repo (short for repository)\nin github first and then connect and push files from your local machine\n\n-    First set your user name and email address\n\n-   You can do this with command line interface (\"cli\") arguments \n\n-   While intimidating, I do recommend you get comfortable with CLI arguments \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit config --global user.name 'alejandrohagan'\n\ngit config --global user.email 'alejandro.hagan@outlook.com'\n\n\ngit config --global --list\n```\n:::\n\n\n- Or you can use r package usethis to do this\n\n2. if you need a PAT  you store it below (thjs will also let you view it and run it)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set creditential using this\ngitcreds::gitcreds_set()\n\n# check using this\n\ngitcreds::gitcreds_get()\n# validate who you are \ngh::gh_whoami()\n```\n:::\n\n\n\n## connect to a repo\n\n\n## pull, committ and push\n\ngit pull to pull latest copy from the origin\nTry to do this immediately as it makes merge conflicts less (in case you edit a file that is updated in the origin )\n\nThen you `git add .` too add all changed documents are specifically specific\n\nThen use `git` commit -m \"message\"`\n\n-   Make messages meaningful focuses on what and why -- helps with merge\n\n-   You can use `git status` to see status of things and `git log` to see past commands\n\n## reversing / undoing\n\n\n## branching / merging\n\nadd branch\n-   `git checkout branch \"branch name\"`\n\ndelete branch\n\n-   `git brand -d \"branch name\"`\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}