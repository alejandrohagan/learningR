[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "",
    "text": "Index",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#excel-to-r-a-survivors-guide-for-the-corporate-environment",
    "href": "index.html#excel-to-r-a-survivors-guide-for-the-corporate-environment",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "text": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Introduction",
    "text": "Introduction",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#set-up-configuration",
    "href": "index.html#set-up-configuration",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Set Up & Configuration",
    "text": "Set Up & Configuration\n\nRstudio\nVisual Studio\nVim",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#the-whole-game",
    "href": "index.html#the-whole-game",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "The Whole Game",
    "text": "The Whole Game\n\nReproducible research\nVersion Control\nImporting data from different systems and environments\nUsing statistical to shortcut business intelligence functions",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#rethinking-data",
    "href": "index.html#rethinking-data",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Rethinking data",
    "text": "Rethinking data\n\nLearning about tabular data vs. report data and why it is important\nColumn naming convention and best practices\ndata dictionary\nData principles\n-https://www.ibcs.com/",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#lookup-tables",
    "href": "index.html#lookup-tables",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "lookup tables",
    "text": "lookup tables\n\nhow to create them\nhow to use them",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#augmenting-and-creating-calculation",
    "href": "index.html#augmenting-and-creating-calculation",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Augmenting and creating calculation",
    "text": "Augmenting and creating calculation\n\nadding columns and calculated columns",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#grouping-and-summzaring-super-power-1",
    "href": "index.html#grouping-and-summzaring-super-power-1",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "## grouping and summzaring (super power 1)",
    "text": "## grouping and summzaring (super power 1)",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#filter-duplicates-advanced-aggregations",
    "href": "index.html#filter-duplicates-advanced-aggregations",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "## filter, duplicates, advanced aggregations",
    "text": "## filter, duplicates, advanced aggregations",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#time-intelligence-functions",
    "href": "index.html#time-intelligence-functions",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Time Intelligence Functions",
    "text": "Time Intelligence Functions\n\nPower BI type intelligence functions",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#merge-and-joins-super-power-2",
    "href": "index.html#merge-and-joins-super-power-2",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Merge and joins (super power 2)",
    "text": "Merge and joins (super power 2)",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#pivot-and-unpivot-super-power-3",
    "href": "index.html#pivot-and-unpivot-super-power-3",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "pivot and unpivot (super power 3)",
    "text": "pivot and unpivot (super power 3)",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#columnwise-vs.-rowwise-aggregation-super-power-4",
    "href": "index.html#columnwise-vs.-rowwise-aggregation-super-power-4",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "columnwise vs. rowwise aggregation (super power 4)",
    "text": "columnwise vs. rowwise aggregation (super power 4)",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#importing-data",
    "href": "index.html#importing-data",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Importing Data",
    "text": "Importing Data",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#spark-database",
    "href": "index.html#spark-database",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Spark & Database",
    "text": "Spark & Database",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#statistical-applications-for-buinsess-intelligence",
    "href": "index.html#statistical-applications-for-buinsess-intelligence",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Statistical Applications for Buinsess Intelligence",
    "text": "Statistical Applications for Buinsess Intelligence\n\nlm+ simple= group_by()+ summarize(mean)\nrq+ simple =group_by()+summarize(median)\nlm+ interaction",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "index.html#visualization-packages",
    "href": "index.html#visualization-packages",
    "title": "Excel to R: A Survivor’s Guide for the Corporate Environment",
    "section": "Visualization packages",
    "text": "Visualization packages\n-   ggplot()\n    -ggiraph\n    -gganimate\n-   gt()\n-   observablejs\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWarning: Since gt v0.6.0 the `fmt_missing()` function is deprecated and will soon be\nremoved.\n• Use the `sub_missing()` function instead.\nThis warning is displayed once every 8 hours.\n\n\n\n\n\n\n\n\n\n\n\nFigure 1",
    "crumbs": [
      "Introduction",
      "Index"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "I have been to the darkest corners of the internet and beyond, searching for answers to the most impossible data problems. I’ve scoured every forum, every blog, every tutorial, and even ventured into the depths of the forbidden knowledge that mere mortals should not possess. But fear not, my friends, for I have returned with solutions that will save you agony and frustration.\nI’m not just talking about your everyday, run-of-the-mill data issues. No, no, no. I’m talking about the kind of data that would make even the most experienced analyst shake in their boots. Messy, inconsistent, non-standard, and downright ugly data that makes you want to throw your computer out the window. But fear not, for I have conquered these data demons and emerged victorious.\nAnd now, I am here to share my knowledge with you, my dear comrades in data crunching. This book will solve 80% of your data problems, with no complex macros or advanced languages required. It’s like a data superhero that will swoop in and save the day, leaving you with more time to sip on a margarita and bask in the glory of your newfound data skills.\nSo if you’re tired of staring at your computer screen, tears streaming down your face, and feeling like you’re stuck in a never-ending data nightmare, then this book is for you. It’s time to take back control of your data, and with my help, you’ll be a data champion in no time.\nThis is meant to quickly reference guide. I will teach you patterns techniques so that you can quickly and effectively get to solutions to your problems. This means building up your analysis frameworks and tool kits.\nIf you’ve been counting, you’ve noticed I’ve used “effective” almost 15 times. What do I mean by that, I’m balancing your time, With all the skills, you can (and some of you should) significantly advanced your knowledge but what happens? For many of you, you’ll build a tool only you can use, you will need to spend significantly amount of your time learning these skills and testing these skills. Things will go wrong. You will be frustrated, eventually you’ll get it right, you will be better for it. But then you will move, the person replacing you will have no clue what you are doing and will quickly undo it, and sure you’ve learnt an advance skill, but unless your organization is build around that level of skill standard - you may not intend it but you will do more harm than good.\nIt also means you will be able to do a typical problem in an defined amount of time. Trust me, there is no point reading this if you can’t do a simple analysis in 15 minutes. Why? Because you spent time training on to have any benefit with your work.\nBy the time you are done, you will gladly look forward to data. It will not intimidate you. You will be excited to quickly semi automate many of your processes. You will be confident. You will be focus on value and process.\nI want to tell you that you will be able to great in 2 weeks but I will lie to you. Yes, for sure you will do some great things very quickly and if you are lucky enough that your data is already perfectly organized and your management teams actually know what they want with data than for sure - you will hit the ground running quickly. However for the rest of us, it will take time to replicate your existing Excel skill set in R and than surpass it. However, I promise you, this is investment is worth it when you are able to automate a report in 10 minutes that used to take you a week.\nBe patient, the concepts taught here are not hard or complex they are just different than what you know. As you become more familiar with the new concepts you will learn it very quickly.\n\nBooks purpose\nThis book will guide you through realistic business scenarios on how to create and automate reports with an emphasis on maximizing your team’s effectiveness\nYou read this and 1) will know how to apply tools to the real life situations that you have faced with an emphasis of effectiveness (as defined by your team & maintenance of the reports you build)\nWhile there are some fantastic R reasources www.bigbookofR.com, the referenced example datasets rarely prepare you for the real life complexities of dealing with Corporate datasets, including challenges of dealing with messy Corporate datasets, maintaining reports when there is significant process changes, and system and offline manual data manipulation required to generate reports.\nAdditionally, whether it is R or python, most learning resources tend to have a heavy focus on statistical techniques / applications which while useful in certain contexts in reality do not help most analyst or managers with their business reporting.\nThis book is focused on developing effective analyst skills that will improve both your R and Excel skills, recognizing that he reality of using exclusively being able to use R in a corporate environment is rare. Furthermore by relating R to excel, you will gain a deeper learning into how R works.\nThere will be better ways to do things that we are teaching you however, they often involve wider resources or time commitments that you may not be able to maintain (however we will provide resources in case you are curious!)\n\nThe dirty secret of popular data science languages are they are perishable, that is to say if you don’t use them frequently you will forget the techniques, syntax and common patterns to solve your issues.\n\nthe real barrier and challenge to learning R is not the language itself, although you won’t believe it now, R is very simple to learn, the challenge will be getting sufficient practice to learn the patterns in your daily life\nFor this – its up to you and your level of dedication / committment.\nI’d recommend to find 30 minutes every day to practice specific skill elements.\nExcels main benefit is its visual user interface – eg you can click buttons, drag and drop columns/rows and you can see your data responds.\nTo help with the R journey, we will introduce (when possible / appropriate) their corresponding Excel actions.\nIt will help you understand what R is doing but help you understand the productivity benefits of R.",
    "crumbs": [
      "Introduction",
      "Introduction"
    ]
  },
  {
    "objectID": "learningR.html",
    "href": "learningR.html",
    "title": "1  How to save things on Git",
    "section": "",
    "text": "1.0.1 Categorical Variables\nIn general you will need to distinguish betwen your character values as either straight character or categorical with levels\nThis becomes critical as you look to create categories and relationships in your data\nforecats is the gotopackage in particular:\nrename\nrecode() to change values in column\nrecode(col,newvalue=oldvalue)\nreorder\nfct_relevel\nfct_relevel(col,level1,level2,etc)\nfct_reorder(col,col_to_be_reorderby,function)\n3)group variables into another group\ncase_when()\n-typically used in combination with mutate() -can reference multiple conditions\ncase_when(col1==var1 ~ val1, col1==var2 & col3==var3 ~ var 2, is.na(col1) ~ “missingvalue”, TRUE ~ “defaultvalue )` cut()\n##purr\n{ } is used to stop a data frame from passing into as first agurmen\n. is a place holder for the data frame\n{r } list.len=3 str(mpg,list.len=3)\nstr(mpg) listviewer::jsonedit(mpg)\n#patchwork\ncan organize with easy convention +,/,| is two charts on top and one chart beneath\nbut can also supplement with additional functions\nplot_layout can also arrnage by rows\nplot_layout(nrow = 3, byrow = FALSE) arguments: width= changes the graphs relative width size, when given as a numeric c(2,1) then the first columsn graphs are twice as large as the second columns height= changes the graphs reltive row heigh, ncol= numeric, changes number of columsn guides=“collect” to remove duplicate guides theme(legend.position=‘bottom’) moves the legend position\nguide_area() to create area that guides=collect move towards\nhttps://patchwork.data-imaginist.com/reference/plot_layout.html\nplot_annotation() to add annotation title = ‘The surprising story about mtcars’ tag_levels = ‘I’ or “A” or “1” to set tag on each plot caption=“Text” theme = theme(plot.title = element_text(size = 16))\nuse the below to add a blank text tile next to a plot grid::textGrob(‘Some really important text’) or a table gridExtra::tableGrob(mtcars\\[1:10, c('mpg', 'disp')\\])\nplot_spacer() inserts an empty plot\ninset_element() to insert a sub graph ontop of a new one\nleft = 0.6, bottom = 0.6, right = 1, top = 1 align_to = ’full\nhelpful tips:\nWhen creating a patchwork, the resulting object remain a ggplot object referencing the last added plot. This means that you can continue to add objects such as geoms, scales, etc. to it as you would a normal ggplot:When creating a patchwork, the resulting object remain a ggplot object referencing the last added plot. This means that you can continue to add objects such as geoms, scales, etc. to it as you would a normal ggplot:geom_jitter(aes(gear, disp))\nOften, especially when it comes to theming, you want to modify everything at once. patchwork provides two additional operators that facilitates this. & will add the element to all subplots in the patchwork, and * will add the element to all the subplots in the current nesting level. As with | and /, be aware that operator precedence must be kept in mind.\nstr_replace_all //s+ = all white spaces\nhow to write tables\nfont 1. Numerical data is right-aligned 2. Textual data is left-aligned 3. Headers are aligned with their data 3½. Don’t use center alignment.\n#visual guide ## axis title - axis title always all caps - align top y axis or left axis - color to match axis color ## graph title left alignment\nAcross(), if_any,if_all\nsummarize/mutuate/pivot_longer/pivot_wider\nacross // character based\nstarts_with\nends_with\ncontains\nmatches\nnum_range()\nlast_col\nwhere()// with a function that has bolean condition eg. is.numeric\nused to select columns by name, position or type (requires where() wrapp)\nc(column names), position or type (where)\nfunction, or list( function1=function(), function2=function())\n{} is used to refenence preivously declared variables in the glue package or in functions that rerence glue package\nsome attributes have sepcial references, such as {.col} to reference a column and {.fn} to refernece a function\nused in the .names argument of across\nacross() doesn’t work with select() or rename()\nmutate, group_by,count,distinct,summarize\nfilter is excluded and instead use if_any and if_all with exceltiion of\nfilter(across(everything), ~function)\nExamples for filter\ncolumn:\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nstarwars %&gt;%\n\nfilter(if_any(everything(), ~ !is.na(.x)))\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\nstarwars %&gt;%\n\nfilter(if_all(everything(), ~ !is.na(.x)))\n\n# A tibble: 29 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 19 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\nNeed to investigate rename_with and and itsimpact on select as it appears to be superseded\ndplyr/colwise.Rmd at main · tidyverse/dplyr · GitHub\nglamour of graphics\nalignemtn\ntop left aligned to the chart left (plot.titile.position=“plot”\nadd_count(dim,name=“text”) %&gt;% mutate(colname= glue::glue(“{col}{text}”)\nrotate lebels, either by swapping axis or removing axis all together\nremove borders\nremove gridlines\nleft /right align text to create clean borders\nindicate legend in title\ngraphing tips and tricks\nif you want to plot a subset of the data but show atrend agains the full data, leverage the data argument in the each individual geom (rather that defining this globally) (example below)\nR-Ladies Freiburg (English) - Level up your ggplot: Adding labels, arrows and other annotations - YouTube\ngeom_curve\naes(x,y,xend,yend)\narrow=arrow(length=unit(x,“inch)),\nsize\ncolr\ncurvature(0 is straight line, positive is right hand curve, negative is left hand curve)\nggforce package has advanced annotation options\ngeom_mark_circle\ngeom_mark_rect\ngeom_mark_hull\ngeom_mark_elipse`\naes(label,filter,description)\nexpand\nlabel.lineheight\nlabel.fontsize\nshow.legend\nggforce() package\nwith_blur() can blur the geoms (ten need to seperately map the geoms that you do want to show\nneed to warp the geom_jitter comand in with_blur\nwith_blur(\ngeom_jitter(),\nsigma = unit(#,“mm”) #blur impact\nfacet_zoom()# takes a larger dataset and then adds in a zoomed up graph\nfacet_zoom(axis =argument==filterar_gument)\nfacet_zoom(x=country==“spain”)\nfacet_zoom(y=length &lt;20)\nProgramming with dplyr • dplyr (tidyverse.org)\nArgument type: tidy-select — dplyr_tidy_select • dplyr (tidyverse.org)\nTidy evaluation is not all-or-nothing, it encompasses a wide range of features and techniques. Here are a few techniques that are easy to pick up in your workflow:\nPassing expressions through {{ and ….\nPassing column names to .data[[ and one_of().\nAll these techniques make it possible to reuse existing comp\nWhen creating forumlas how to referece to names?\nSTart with fixed names (only if you are sure it wont change) and try wrapping that around a test to ensur eit exists\nduoble currly braces {{}}\nWhen you want to reference a data variable from an env. variable in function, you pass the dataframe to the function then wrap the data var with {{var}} in order pull it from the env frame (instead of saying data$x)\nwhere() for search paramters\n.data[[var]]\nif you env variable is a character frame that you must use .data[[var]]\nall_of or any_of for character vectors for search praramters\ncompute_bmi &lt;- function(data) { if (!all(c(“mass”, “height”) %in% names(data))) { stop(“data must contain mass and height columns”) }\ndata %&gt;% transmute(bmi = mass / height^2) }\nhow to use as nmaes\n“mean_{{var}}” := mean({{var}})\nOpen questions\nwhen do you sue data and when do use .data (okay answer apparently when you use … you start other variables with “.” eg. .data to avoid conflictino ix | Tidyverse design guide\n)\nf you want the user to provide a set of data-variables that are then transformed, use across():\nmy_summarise &lt;- function(data, summary_vars) { data %&gt;% summarise(across({{ summary_vars }}, ~ mean(., na.rm = TRUE))) } starwars %&gt;% group_by(species) %&gt;% my_summarise(c(mass, height)) #&gt; # A tibble: 38 × 3 #&gt; species mass height #&gt;    #&gt; 1 Aleena 15 79 #&gt; 2 Besalisk 102 198 #&gt; 3 Cerean 82 198 #&gt; 4 Chagrian NaN 196 #&gt; # … with 34 more rows\nYou can use this same idea for multiple sets of input data-variables:\nmy_summarise &lt;- function(data, group_var, summarise_var) { data %&gt;% group_by(across({{ group_var }})) %&gt;% summarise(across({{ summarise_var }}, mean)) }\nUse the .names argument to across() to control the names of the output.\nmy_summarise &lt;- function(data, group_var, summarise_var) { data %&gt;% group_by(across({{ group_var }})) %&gt;% summarise(across({{ summarise_var }}, mean, .names = “mean_{.col}”)) }\nAction versb to know how to use\nArgument type: tidy-select — dplyr_tidy_select • dplyr (tidyverse.org)\neverything(): Matches all variables.\nlast_col(): Select last variable, possibly with an offset.\nThese helpers select variables by matching patterns in their names:\nstarts_with(): Starts with a prefix.\nends_with(): Ends with a suffix.\ncontains(): Contains a literal string.\nmatches(): Matches a regular expression.\nnum_range(): Matches a numerical range like x01, x02, x03.\nThese helpers select variables from a character vector:\nall_of(): Matches variable names in a character vector. All names must be present, otherwise an out-of-bounds error is thrown.\nany_of(): Same as all_of(), except that no error is thrown for names that don’t exist.\nThis helper selects variables with a function:\nwhere(): Applies a function to all variables and selects those for which the function returns TRUE.\narrange(), count(), filter(), group_by(), mutate(), and summarise() use data masking so that you can use data variables as if they were variables in the environment (i.e. you write my_variable not df$myvariable).\nacross(), relocate(), rename(), select(), and pull()\nrowwise()\ncolwise()\nTricks\nmean in summarize will give you the portion of that variable per the group\npurr\nresources\n9 Basic map functions | Functional Programming (stanford.edu)\nMap and Nested Lists | R-bloggers\npattern\ntake one element .x&lt;-list[[1]]\ndo the formula based on that element\nset_names() without argument sets the names equal to the values\nmap returns list, control map outcomes with map alternatives eg. map_df, map_dbl\nif function has more than one argument then define a function upfront in global environment and pass the second y argument as explicit command in map [follow up how to do this in anonymous way)\nmap(1:5,custom_function,y=2)\npmap for more than one vector\ncan also pass through functions as objects not just data\nfuns&lt;- list(mean,median,sd)\nmap(funs,~map_dbl(mtcars,.x))\nstart on the inside and then work your way to the outside\nwalk similiar ot map but is design for function that you want to run soley for hte side effects\nso walk will always return the origional vector eg. walk(.x,.f)=&gt; .x whereas map will return map(.x,.f)=&gt; .f(.x.\nSo why use walk? when you want the formula side effectt (eg saving a picture)\naccumulate\napplies same function again and again and again\napplies function to first argument then takes that result and applies that outcome to second argument\neg. accumulate(letters,paste), will produce a prymid of values of all the letters\nso accumlate will show all the interim values\nreduce will only show the final value\nthis is recursive\nHowever, if you want pair wise actions 11, 22, etc then you need map2\ntidytext\nunnest_tokens basically takes a string and breaks t into characters, words, or others ngrams,\nFrom there use typical dplybs to graph, popular geoms are geom_text to plot the words aagainst their proportion.\ntypiecal tokenize methodologies use ICI (international components of unicode) which defines word boundaries )\nChapter 2 Tokenization | Supervised Machine Learning for Text Analysis in R (smltar.com)\npackages\ntidytext\ntokenize\nstopwords\nSnowballC for stemming\nhunspell also for stemming / spell check\ntypes of toekn\ncharacters\nwords,\nsentences\nlines,\nparagraphs\nngrams\nyou can use tidytext package or tokenize package but here is your pattern\ngrab text\nadd a dimenion factor (eg. chapter, author, book)\nnest the data by the dimension\nif data is nested use mutate(map()) pattern to perform transformations\nif doing setences or paragraphs you may need to paste() the text and add paragraph breaks “” (paragraphs) or space breaks ” ” (sentences)\nthen use either tidytext(returns tibble) or tokenizer (returns lists) to do unnesting work\nunnest data\nanti_join(stop_words)\nregex considerations\n[:alpha:] brings in non US lettesr where as [a-zA-Z] only brings in US letters\n? is optional (will match or not)\n^ starts with\n$ends with\nstop words\nstopwords package with snowball, iso and other packages\nstemming\ncan stem words tree, tree’s into single word\nhowever also has impact of creating new words to stem by\nSnowballC package offers wordStem\ntokenizer::tokenize_word_stems\nhunspell:hunspell_stem\nmore resources\nChapter 2 Tokenization | Supervised Machine Learning for Text Analysis in R (smltar.com)\ntidytext",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to save things on Git</span>"
    ]
  },
  {
    "objectID": "learningR.html#tidy-evaluation",
    "href": "learningR.html#tidy-evaluation",
    "title": "1  How to save things on Git",
    "section": "1.1 tidy evaluation",
    "text": "1.1 tidy evaluation\nresources\n2 Why and how | Tidy evaluation (tidyverse.org)\nProgramming with dplyr • dplyr (tidyverse.org)\nImplementing tidyselect interfaces • tidyselect (r-lib.org)\nTechnical description of tidyselect • tidyselect (r-lib.org)\n13 Tidy evaluation basics | Functional Programming (stanford.edu)\nprinciples\ndata masking is when you delay the evaluation of a code so that the code can find relevant columns for computation. th\nThis is why you can can do::\n{r}\n#this will work starwars %&gt;% filter( height &lt; 200, gender == “male” )\n#but really the program needs this, reference to dataframe and column starwars[starwars\\(height &lt; 200 & starwars\\)gender == “male”, ]\ntechnical term for delaying code is quoting\nthis delaying of code evalution can help you when using code but also make things more complicated when writing code\nvectoring can occur when either input has 1 or same length of input object to ensure all columns have same length\nsome functions can repeat values if recycling completes the length\nhowevre other,like tidyverse family don’t\n!! takes a variable defined outside of function and allows you to use it within a function x&lt;-1 function(x) !!x+1, qq_show() allows you to see what is happening\n!! works for assiging a variable not a column name or only variable\n!! is simliar to := but := is only for left hand side eg setting a name\nwhen working with lists you need !!! to pull out each element and pass it through otherwise !! just pass through the list as is also need to use enquos() vs. enquo\nsym) is how you quote for column names and !! is how you unquote, however sym() only works for character strings so “mpg” vs. mpg\nenquo is used for non character strings and then !! is how you unquote them\nrlang::qq_show will help show what how !! is being evaluated\npattersn\nenquo() and !!\n:= and !!\nenquos() and !!!\nhow to use environment character vectors in a function or formula? - use all_of() or any_of() (use ! to negate) linkhere - you can also suse sym or syms with !!! link here\nhow to quote a uncharacter argument into a character arugment - dots &lt;- enquos(…, .named = TRUE) will turn a unquoted input into a quosure variable - nm1 &lt;- purrr::map_chr(dots, rlang::as_label) then use this to transform into character vectors which canbe used in functions linkhere\n#PCA\npca_rec &lt;- recipe(~., data = sample_df) %&gt;% update_role(daily_miss, new_role = “id”) %&gt;% step_normalize(all_predictors()) %&gt;% step_pca(all_predictors())\npca_prep &lt;- prep(pca_rec)\npca_prep\ntidied_pca &lt;- tidy(pca_prep, 2)\ntidied_pca %&gt;% filter(component %in% paste0(“PC”, 1:5)) %&gt;% mutate(component = fct_inorder(component)) %&gt;% ggplot(aes(value, terms, fill = terms)) + geom_col(show.legend = FALSE) + facet_wrap(~component, nrow = 1) + labs(y = NULL)\nprincomp with plot(pca_mod, type=“lines”).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to save things on Git</span>"
    ]
  },
  {
    "objectID": "learningR.html#advanced-plotting-contorl-over-color-shape-or-alpha",
    "href": "learningR.html#advanced-plotting-contorl-over-color-shape-or-alpha",
    "title": "1  How to save things on Git",
    "section": "1.2 advanced plotting, contorl over color, shape or alpha——",
    "text": "1.2 advanced plotting, contorl over color, shape or alpha——\n\nadd column that by attribution (eg. color, shape,alpha)\nuse case_when that identifies row attributes and gives the custom formatting\n\n\ndiamonds_formatting &lt;- diamonds %&gt;% \n  mutate(\ncustom_col= case_when(\n  between(price, 400,2000) ~ 'grey60',\n  price &lt; 5000 ~ \"red\",\n  price &lt; 10000 ~ \"blue\",\n  price &lt; 20000 ~ \"purple\",\n  color ==\"G\" ~ '#AA4465',\n  TRUE ~ \"orange\"),\ncustom_shape=case_when(\n  color ==\"G\" |color==\"E\" ~ 13,\n  TRUE ~ 4)\n  \n)\n\n\npass arguments to ggplot mapping the col, shape, alpha to the respective columns\nmust add scale_*_identity() to the plot for this to work\n\n\ndiamonds_formatting %&gt;% \n  ggplot(aes(price,color,col=custom_col,shape=custom_shape))+\n  geom_point()+\n  scale_color_identity()+\n  scale_shape_identity()\n\n\n\n\n\n\n\n\n\nsource (https://alberts-newsletter.beehiiv.com/)[]\n\n#tidyselect verbs\ncontains() starts_with() ends_with() 1:10 a:b last_col() -offset=X –offset argument matches() num_range() -needs arguments\nbased on character names all_of() any_of()\npass a formula to check against each column where() -is.numeric() -is.factor() ~mean(.x) &gt;3.5\n\n1.2.1 common tasks—\napply a function to multiple columns to perform action onto column or new columns - Across() apply a column of arguments, one by one, as input into a function - map() apply two or more column of arguments as simulataneous inputs into a function - map2() apply one column of arguments as input to function, then combine output with new argument - purrr::reduce()\napply a function to pairs of columns on a rolling basis (eg. col 1 -2, col 2 - 3, etc) ????",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to save things on Git</span>"
    ]
  },
  {
    "objectID": "learningR.html#count",
    "href": "learningR.html#count",
    "title": "1  How to save things on Git",
    "section": "1.3 count",
    "text": "1.3 count\ncount very useful function to quickly tabulate data use .drop to show any data that has been filtered out or removed\n\nlibrary(tidyverse)\n\n\n1.3.1 how to parse out words from a sentence\n\nfixed position and fixed seperated but whole word (seperated by consistent seperator\n\n\nstring &lt;- c(\"I only want the third word of each sentence\",\n            \"I only need the third word of each setence\",\n            \"I only use the third worsd of each sentence\")\nlibrary(tidyverse)\nstringr::word(string, #vector of strings\n              start=3, #where to start extraction\n              end=3, #where to end extraction\n              sep=\" \")# what seperator to parse\n\n[1] \"want\" \"need\" \"use\" \n\n\nstringr::word(string,start=x,end=y,sep=?)\nis.element(input,check_strings) – validates inputs matches at least one in a set",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to save things on Git</span>"
    ]
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "",
    "text": "3 Resource\nResource to understand databases\nR for datascience chapter on database\nDbplyr functions\nHow to use duckdb\nDBI function overivew\nPosit learning materials\ndbplot_histogram",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#the-essentials",
    "href": "database.html#the-essentials",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.1 The Essentials",
    "text": "4.1 The Essentials\nWhat do you need to access data in a database?\n\nA database with data inside of it\n\nAccess / permission to the database\nLocation, user name and password to database (or equivalent protocols as dictated by your organization’s security model)\nDatabase driver and related utilities\nSQL querys\nPatience\n\n\n\n\n\n\n\n“What is the advantage of a database?”\n\n\n\n\n\nIt comes down to scale and size. At some point your organization or process will generate substantial data and needs a more structured process to store the data so that multiple parties can access the data at scale.\nWhen dealing with a new database some key frameworks are:\n\nCloud vs. On-Premise\nSecurity model and access\n“Flavor” of database\nImproved data management: A database centralizes data, making it easier to manage and maintain\nEnhanced data security: A database provides secure storage and retrieval of sensitive data through user authentication and access control mechanisms\nBetter data organization: A database theoretically allows for better organization and structure of data through the use of tables, indexes, and relationships\nImproved query performance: Databases are optimized for query performance, allowing for faster retrieval of data.\nScalability: Databases can handle large amounts of data and scale as needed to meet growing storage demands.\n\nCloud vs On-Premise Database:\n\nCloud databases are hosted on remote servers, while on-premise databases are hosted on local servers (when you read servers just replace it with the word computers. You are either using your organization’s computer (on prem) or you are using someone else (cloud))\nCloud databases offer greater flexibility in terms of scalability and accessibility, as they can be accessed from any location with an internet connection.\nOn-premise databases provide more control over data security and privacy, as the data is stored on a local server and not transmitted over the internet.\nCloud databases typically require less setup and maintenance than on-premise databases, as they are managed by the provider.\nCost: Cloud databases are often subscription-based and can be more cost-effective than on-premise databases, especially for small to medium-sized businesses.\n\nSecurity Model and Access:\n\nSecurity model: A database’s security model determines who has access to the data and how they can access it. Common security models include Role-Based Access Control (RBAC), Attribute-Based Access Control (ABAC), and Identity-Based Access Control (IBAC).\nAccess control: A database’s access control mechanisms determine who can view, edit, or delete data. This can be based on user authentication, role-based access control, or attribute-based access control.\nAuthentication methods: Databases support various authentication methods such as username and password, single sign-on (SSO), and two-factor authentication (2FA).\nAuthorization methods: Databases support various authorization methods such as row-level security, column-level security, and table-level security.\nAuditing and logging: Databases can log all access attempts and successful accesses to track user activity and detect potential security breaches.\nEncryption: Databases can encrypt data both in transit and at rest to protect it from unauthorized access.\nBackup and recovery: Databases provide mechanisms for backing up data and recovering from failures or security incidents.\nIdentity and access management (IAM): IAM systems manage user identities and access rights within the database, ensuring that only authorized users can access the data.\nRole-based access control (RBAC): RBAC allows for assigning roles to users based on their job function or responsibilities, limiting the data they have access to.\nAttribute-based access control (ABAC): ABAC grants or denies access to data based on attributes associated with the user or the data itself, such as location or time of day.\n\n\n\n\nWhat does a database need from you?\n\nThe most frustrating part of database is getting access to the database, setting up the database utilities and then making the initial connection\nThere are multiple ways to connect to a database however almost all require the following:\n\nUser name\nPassword\nDatabase driver\nConnection string and associated arguments\nSQL query\n\nWe will review the DSN method for connecting to a database\nThese tend to be confusing because much of this is controlled and managed by your local IT department so whatever documentation or guide you read on online may not translate one for one to your localized experienced (this includes this guide as well :(",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#set-up-odbc-driver",
    "href": "database.html#set-up-odbc-driver",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.2 Set up ODBC Driver",
    "text": "4.2 Set up ODBC Driver\n\nDownload (if required) a database driver for your database – this is typically on the database company’s website\n\nYour company may have centralized package manager system where you will need to download and install all required drivers via that packet manager\n\nConfigure your DSN so that you can be authenticated\nYour database platform should have documentation on how to do this and your internal IT team should be able to articulate any proxy / security requirements\nHere is some example documentation\nYou are essentially saving the required information (listed above) to your computer so that you can pass these arguments to the database\nPay attention to the name you setup the DSN driver, you will need this later one\n\nExample Paramaters are below\n\nUser\nPassword\nServer\nDatabase\nSchema\nWarehouse\n\nTracing\nAuthenticator",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#create-connection-string",
    "href": "database.html#create-connection-string",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.3 Create Connection String",
    "text": "4.3 Create Connection String\n\nIf the above is done correctly you can then use DBI package in R to connect to the database of your choice\nCreate a connection string with DBI::dbConnect()\n\nSelect the DBMS wtih the driver_name such as ODBC::ODBC() to access your DSN set up connect to external database or can use DMBS package such as duckdb::duckdb() to replicate an internal instance of a database\nDSN name if external database (the name used to set up ODBC driver)\nAlternatively, you can directly supply the arguments in DBI::dbConnect() such as hostname,port,username, etc\n\n\n\n\nCode\n## this uses duckdb example to create a connection string\n\ncon &lt;- DBI::dbConnect(drv=duckdb::duckdb())\n\n## this is alternative example using a made up DSN name \n\ncon  &lt;- DBI::dbConnect(\n  drv=odbc:odbc()\n  ,dsn=\"your_DSN_name\" \n  )\n\n\n\n\n\n\n\n\nAdditional Utilities\n\n\n\n\n\n\nthe DBI and ODBC packages are extremely useful for database related utilities\nWhile they have some existing overlap, they can be used to view the schema in your database, list active connections and also disconnect.\nBelow are some useful utilities:\n\n\ntribble(\n  \n  ~name                      ,~purpose\n  ,\"odbc::odbcListDrivers()\",\"list your drivers\"\n  ,\"DBI::dbListConnections()\",\"as you create connections with dbConnect(), this wil list active connections\"\n  ,\"DBI::dbCanConnect()\",\"checks if you can connect to tables\"\n  ,\"DBI::dbListTables()\",\"lists tables associated with the connection\"\n)\n\n# A tibble: 4 × 2\n  name                     purpose                                              \n  &lt;chr&gt;                    &lt;chr&gt;                                                \n1 odbc::odbcListDrivers()  list your drivers                                    \n2 DBI::dbListConnections() as you create connections with dbConnect(), this wil…\n3 DBI::dbCanConnect()      checks if you can connect to tables                  \n4 DBI::dbListTables()      lists tables associated with the connection",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#checks-if-you-can-connect",
    "href": "database.html#checks-if-you-can-connect",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.4 Checks if you can connect",
    "text": "4.4 Checks if you can connect\nDBI::dbCanConnect()",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#list-tables-listed-under-connection",
    "href": "database.html#list-tables-listed-under-connection",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.5 List tables listed under connection",
    "text": "4.5 List tables listed under connection\n\n4.5.1 list tables in connection\ndbListTables(con) to list tables associated with a connection\n:::\n\nAfter you have created a connection string you now need to retrieve information from the database",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#option-1-create-sql-string",
    "href": "database.html#option-1-create-sql-string",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.6 Option 1: Create SQL string",
    "text": "4.6 Option 1: Create SQL string\n\nIf you know the database, schema and table name that you want, you can write the initial sql query to connect to the database\nYou can write simple or advance query insde the dplyr::sql() function\n\n\nsql_query &lt;- dplyr::sql(\"select *  from database_name\")",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#accessing-databse",
    "href": "database.html#accessing-databse",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.7 Accessing Databse",
    "text": "4.7 Accessing Databse\n\nUse connection string and sql query together to create a lazy table with dplyr::tbl()\nWe call this a lazy table because it won’t actually execute the query and return the results which is good because your query might return 100s of results\n\n\ndata_db &lt;- dplyr::tbl(con,sql_query)\n\n\nFrom there you can use dplyr back end queries to see everything (notice the distinction between dbpyr and dplyr\nIf you use the dbplyr package, you are limited to queries that can be translated to sql which are detailed below\n\ngithub of dplyr commands that can be used in dbplyr\nYou can also check the database specifichere\n\nYou can see what query it will generate with dbplyr::show_query()\nNotice the class of the object you return, you are returning a database object – if you want to return a dataframe you need to use dplyr::collect()",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#option-2-push-existing-data-into-a-database",
    "href": "database.html#option-2-push-existing-data-into-a-database",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.8 Option 2: Push existing data into a database",
    "text": "4.8 Option 2: Push existing data into a database\n\nFirst you need to have a connection string to a database (and write permissions)\nIf you already have something as a dataframe you can upload it to a database with DBI::dbWriteTable(con,“tbl_name”,df) which will write the table to the connection with the name you gave\n\nDBI::dbWriteTable() can write a r dataframe or you can use sql to create a virtual table if you want\ndbplyr::copy_inline(con_db,df = df) is alternative method\nIf you have duckdb connection you can use the duckdb::duckdb_register()\n\n\n\n# create connection\ncon_db &lt;- DBI::dbConnect(duckdb::duckdb())\n\n# write data into database\nDBI::dbWriteTable(con_db,name = \"diamonds_db\",value = ggplot2::diamonds)\n\n# or alternative use the database argument to regester\nduckdb::duckdb_register(con_db, \"diamonds_db_2\",df =  ggplot2::diamonds)\n\n# validate data is in database by reference connection\nDBI::dbListTables(con_db)\n\n[1] \"diamonds_db\"   \"diamonds_db_2\"\n\n# Pull in data in database format\ndiamonds_db &lt;- dplyr::tbl(con_db,\"diamonds_db\")",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#what-happens-if-dbplyr-doesnt-have-a-function-that-i-need",
    "href": "database.html#what-happens-if-dbplyr-doesnt-have-a-function-that-i-need",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.9 What happens if dbplyr doesn’t have a function that I need?",
    "text": "4.9 What happens if dbplyr doesn’t have a function that I need?\n\nThis will happen, take for example if you want to do the ceiling date of date column (eg. round 2024-01-05 to 2024-01-31)\n\n\n\n4.9.1 built in helper functions\n\ntranslate_sql()\n\n\n\n4.9.2 create sql query and use it\nUse a parameterised query with dbSendQuery() and dbBind()\nUse the sqlInterpolate() function to safely combine a SQL string with data\nManually escape the inputs using dbQuoteString()\nhttps://solutions.posit.co/connections/db/best-practices/run-queries-safely/",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#how-can-i-build-a-package-for-this",
    "href": "database.html#how-can-i-build-a-package-for-this",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.10 how can I build a package for this?",
    "text": "4.10 how can I build a package for this?\nbuild_sql()\nairport &lt;- dbSendQuery(con, “SELECT * FROM airports WHERE faa = ?”)\nUse dbBind() to execute the query with specific values, then dbFetch() to get the results:\ndbBind(airport, list(“GPT”)) dbFetch(airport)\nOnce you’re done using the parameterised query, clean it up by calling dbClearResult()\ndbClearResult(airport)",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#putting-it-all-together",
    "href": "database.html#putting-it-all-together",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.11 Putting it all together",
    "text": "4.11 Putting it all together\n\nSet up your drive, get required database info and related utilities\nCreate connection to your database\nwrite an inital query to select the columns that you want or need\nUse dbplyr to translate dplyr queries to SQL\nreturn results to your local machine with dplyr::collect()",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#you-can-pass-one-database-object-to-duckdb",
    "href": "database.html#you-can-pass-one-database-object-to-duckdb",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "6.1 You can pass one database object to duckdb",
    "text": "6.1 You can pass one database object to duckdb\n\n```{r}\n#| label: db-connect example\n#| eval: true\n\n## create connection string locally\ncon_db &lt;- DBI::dbConnect(duckdb::duckdb())\n\n# loads data into your connection either in memory\nDBI::dbWriteTable(con_db,\"diamonds_db\",ggplot2::diamonds)\n\n#create new table to the connection\n\nDBI::dbExecute(con_db, \"CREATE TABLE duckdb_table (col1 INT, col2 STRING)\")\n```\n\n[1] 0\n\n\n#preview what is in your connection\n\nDBI::dbListTables(con_db)\n\ndbplyr::copy_inline(con_db,df = diamonds)\n\n\ndiamonds_db &lt;- dplyr::tbl(con_db\n    ,\"diamonds_db\"\n    )",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#run-sql-queries-safely",
    "href": "database.html#run-sql-queries-safely",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "8.1 Run SQL queries safely",
    "text": "8.1 Run SQL queries safely",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#how-to-plot-a-database-object",
    "href": "database.html#how-to-plot-a-database-object",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "8.1 How to plot a database object",
    "text": "8.1 How to plot a database object\nrm package pool\n\nlibrary(dm)\n\n\nAttaching package: 'dm'\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\ndm &lt;- dm_nycflights13()\n\ndm\n\n── Metadata ────────────────────────────────────────────────────────────────────\nTables: `airlines`, `airports`, `flights`, `planes`, `weather`\nColumns: 53\nPrimary keys: 4\nForeign keys: 4\n\n\n\ndm %&gt;%\n  dm_draw()",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "database.html#how-to-build-packages-or-function-to-access-dbplyr",
    "href": "database.html#how-to-build-packages-or-function-to-access-dbplyr",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "8.3 How to build packages or function to access dbplyr",
    "text": "8.3 How to build packages or function to access dbplyr\n\ntwo options:\n\nsprintf to generate actual sql queries\ndbplyr / similiar to spring",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "interactions.html",
    "href": "interactions.html",
    "title": "3  Understanding a model outcome",
    "section": "",
    "text": "4 Setup\n#load libraries and summarize data to be be used in later analysis\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(marginaleffects)\n\n#devtools::install_github(\"alejandrohagan/fpaR\")\n\n\ndf &lt;- fpaR::contoso_fact_sales %&gt;% \n  janitor::clean_names() %&gt;% \n  left_join(fpaR::contoso_dim_product %&gt;% janitor::clean_names(),by = join_by(product_key))\n\n# create dataset \ndf_summary &lt;- df %&gt;% \n  mutate(rev=unit_price.x*sales_quantity) %&gt;% \n  summarise(\n    rev=sum(rev)\n    ,n=n()\n    ,vol=sum(sales_quantity)\n    ,avg_vol=mean(sales_quantity)\n    ,distinct_col=length(unique(color_name))\n    ,.by = c(date_key,brand_name,color_name)\n  ) %&gt;% \n  mutate(\n  vol_group=\n  cut_number(\n  vol\n  ,n= 5\n  ,labels=c(\n  \"0 - 638\"\n  ,\"639 - 1,207\"\n  ,\"1,208 -  1,900\"\n  ,\"1,901 - 2,544\"\n  ,\"2,544 - 3,180\")\n  )\n)",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#summary",
    "href": "interactions.html#summary",
    "title": "3  Understanding a model outcome",
    "section": "4.1 Summary",
    "text": "4.1 Summary\n\nTrying to interpret a model outcome can be complex when you have complex models\nFortunately there are tools and framework that we can use to help us understand our model outcomes and how outcomes can differ between groups\nmarginaleffects is useful to understand a statistical model along four key metrics\n\npredicitons: What is the model predicting?\ncomparsion: how do factors or group compare to eachother\nslopes: how to estimates compare across a range of references\nhypothesis: How to test a statistical question\n\nWhen doing any analysis, the below framework is useful to understand:\n\nEstimate\n\nWhat is the target variable you want to understand?\nThis is traditionally the y value in a formula\nImportant to pay attention to the units if you transform it\n\nContrast\nRisk ratio\nOddlogs\nSlope\n\n\nGrid\n\nWhat granularity do you want to understand the model results\nThis can be equivalent to each row of the underlying dataframe or this can be scenarios that you want to understand the average affects\nThis is specfically the granularity you want to apply the model to, it may or may not be the same granularity that you want to report the model results\n\nDo we want to produce estimates for the individuals in our dataset, or for hypothetical or represnts? - prediction of the average person? - observed units - synthic units (counter-factual)\nAggregation\n\nHow do you want sum and report the insights?\nWhat group do you want to average (or sometimes called marginalize the insights by)\n\naverage fitted value\naverage risk difference\naverage slope for high school graduates\nUncertainity\n\nHow do you want to measure the uncertainity of the estimate\n\n\nHow do we quantify uncertainity about our estimates\n\nDelta method\nBoostrap\nSimulaiton based inference\nHypothesis\n\nWhat question do you want to answer\nEg is the estimate signficant than zero?\n\nWhat hypotheis or equivalent test do we conduct?",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#predictions",
    "href": "interactions.html#predictions",
    "title": "3  Understanding a model outcome",
    "section": "5.1 Predictions",
    "text": "5.1 Predictions\n\nAble to generate three functions\n\npredictions using counter-factual data (eg. controlling variable at various levels)\n\n\n\n`predictions(mod,variables=list(am=c(0,1)))`\n\n-   predictions keeping input regressors at their mean, median or mode values\n\n-   `predictions(mod,newdata=\"mean\")`\n\n-   `predictions(mod,newdata=datagrid())``\n\n-   predictions(mod,\n        datagrid(\n        FUN_numeric = mean\n        ,FUN_character=unique\n        )\n)\n\n-   predictions keeping input regressors at a specfic value via a \n*structured datagrid*\n\n`predictions(\nmod\n,newdata=\ndatagrid(\n    am=c(0,1)\n    )\n)`\n\n\nIf no datagrid() or newdata argument is specified the predictions will return a new data\nYou can optionally summarize the information through the:\n\nby argument\ndatagrid(),\navg_predictions()\n\nthe uncertainty test can be changed through the vcov argument\n\n\n\n\n\n\nflowchart TD\n\n    A[Start] --&gt; base{Predictions}\n    \n    %% counterfactual prediction\n\n    base --&gt;|Create\\npredictions\\nbased on\\nwhat if| counterfactual[\"Create\\ncounterfactual\\ndataset\\n(duplicates the data)\"]\n    counterfactual --&gt; |formula| counter_formula[\"predictions(\\nmod\\n,variables=list(var=c(0,1))\\n)\"]\n    counterfactual --&gt; |data only| counterfactual_grid_only[\"datagrid(\\nmodel = mod,\\nhp = c(100, 110),\\ngrid_type = 'counterfactual')\"]\n    %% static inputs based on mean/median or mode\n\n    base --&gt;|Predict with\\nthe inputs at\\ntheir means| static_inputs[Controlling\\ninput\\nvariables at\\ntheir\\nmean\\median\\mode]\n    static_inputs --&gt;newdata[\"predictions(\\nmod\\n,newdata='mean'\\n)\"]\n    static_inputs --&gt;datagrid[\"predictions(\\nmod\\n,datagrid(\\nFUN_numeric=mean\\nFUN_factor = unique) \\n ) \"]\n    static_inputs--&gt;default[\"predictions(\\nmod\\n,datagrid() \\n ) \"]\n \n    %% rowlevel predictions on existing data\n    \n    base --&gt;|Predict with existing data| rowwise[Produce row level prediction]\n    rowwise --&gt;prediction_formula[\"prediction(mod)\"]\n    \n    %% predictions based on structured grid\n\n    base --&gt;|predict based on structured scenario| structured_scenario[\"create scenario\"]\n    \n    structured_scenario --&gt;datagrid[\"predictions(\\nmod\\n,newdata =\\n datagrid(\\ncyl = mtcars$cyl\\n, hp = c(90,100))\\n\"]",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#hypotheses-function",
    "href": "interactions.html#hypotheses-function",
    "title": "3  Understanding a model outcome",
    "section": "5.2 Hypotheses function",
    "text": "5.2 Hypotheses function\n\nHypotheses() command is similiar to summary()\nIt will show the p values of the estimates\nYou can change the test argument with the hypothesis arguments can change null instead of 0 to be another value\n\nCan be numeric value hypotheses(mod,hypothesis=2)\nCan be categorical differences “distanceMedium=distanceLong”\nSimply put the LHS and equal and put a formala or reference value\nCan reference variables by b(eta), number or names(coef(mod)) eg “b4=b5”,“b4=b2”\nHypothesis = “pairwise” to see pairs of arguments\nhypothesis = “Sequential” to see sequential comparisons of arguments\n\nExpand the null hypothesis to a range eg. is the effect between a,b vs. just 0\nhypotheses(mod,equivalence=c(-3,3))\n\n\n\n\n\n\n\nNote\n\n\n\n\nHow to read output?\n\nS value is equivalent to how many times you will toss a head in a row\n\n\n\n\n\nUseful to compare modeling outcomes between groups or within factors\n\ncomparison( mod ,variables #the thing we want to understand - variables=list(color=c(“red”,“black”) – change of red to black - variables=list(unit_price=5) – chagne of prices increase 5 - variables=list(unit_price=“sd”) – change of one standard deviatin of the price - variables=list(unit_price=“iqr”) – change of across iqr of the price - variables=list(unit_price=c(10,500)) – change of ten to 500 ,comparison #can make it into a ratio, any built in funciton or custom function ,newdata= # the datagrid we want to understand the comparison by ,by = # the dimension we we want to aggregate by ,vcov= # uncertainity ,hypothesis # the specific question we want to answer or test for )",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#how-to-understand-model-outputs",
    "href": "interactions.html#how-to-understand-model-outputs",
    "title": "3  Understanding a model outcome",
    "section": "5.3 how to understand model outputs",
    "text": "5.3 how to understand model outputs\n\nCreate a sample dataframe framing the example variables that you want to understand (this creates the constant argument)\nUse the predicitions on the dataframe\nto understand the relative difference of variance, use the comparison\n\n#common categorical variables -unique -sequential -pairwise",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#helper-packages",
    "href": "interactions.html#helper-packages",
    "title": "3  Understanding a model outcome",
    "section": "5.4 helper packages",
    "text": "5.4 helper packages\nmatchit – stratify data mice – impute missing data",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#notes-for-class",
    "href": "interactions.html#notes-for-class",
    "title": "3  Understanding a model outcome",
    "section": "5.5 notes for class",
    "text": "5.5 notes for class\n\ndifferent column names when using view for predictions vs. what is printed in the console\nis setting variables argument in prediction the same as setting the grid_type=“counterfactual”\nin the newdata=datagrid is there a way to get average values per group (eg. if you use FUN_factor=unique",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#predictions-1",
    "href": "interactions.html#predictions-1",
    "title": "3  Understanding a model outcome",
    "section": "6.1 Predictions",
    "text": "6.1 Predictions\n\ncounterfactual_predictions &lt;- predictions(mod_simple,variables=list(avg_vol=c(4,1000)))\n\ncounterfactual_predictions %&gt;% \n\ngroup_by(avg_vol) %&gt;% \n\nsummarize( \n    avg_rev=mean(estimate,na.rm=TRUE)\n    )\n\n# A tibble: 2 × 2\n  avg_vol avg_rev\n    &lt;dbl&gt;   &lt;dbl&gt;\n1       4  35486.\n2    1000 253805.\n\n\n\nAlternatively you can use the datagrid() arguement to create new a dataset with each value at their average, median or mode value\n\nuse the FUN_factor() and FUN_numeric to sample datamodel\nthis will take overall mean or median values (not group specific)\nbased on these unique values and overall avg values it will do a prediction per mini group\n\n\n\npredictions(\n        mod_simple\n        ,newdata=\n        datagrid(\n            FUN_numeric=median\n            ,FUN_factor=unique)\n) \n\n\n Estimate Std. Error       z Pr(&gt;|z|)     S  2.5 % 97.5 %\n    45528        654  69.612   &lt;0.001   Inf  44246  46810\n    43660        726  60.154   &lt;0.001   Inf  42238  45083\n    89011        571 155.763   &lt;0.001   Inf  87891  90131\n    11977        846  14.153   &lt;0.001 148.6  10318  13635\n    77627        610 127.300   &lt;0.001   Inf  76432  78823\n--- 150 rows omitted. See ?avg_predictions and ?print.marginaleffects --- \n     -240       1145  -0.209    0.834   0.3  -2483   2004\n    -1674       1613  -1.038    0.299   1.7  -4835   1487\n   -10693       1031 -10.372   &lt;0.001  81.3 -12713  -8672\n   -63592       3028 -21.001   &lt;0.001 322.9 -69527 -57657\n   -25311       1961 -12.905   &lt;0.001 124.2 -29155 -21466\nColumns: rowid, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, rev, brand_name, color_name, avg_vol \nType:  response",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "interactions.html#plot-predictions",
    "href": "interactions.html#plot-predictions",
    "title": "3  Understanding a model outcome",
    "section": "6.2 Plot predictions",
    "text": "6.2 Plot predictions\n\nmod_simple %&gt;%  \n\nplot_predictions(condition=c(\"avg_vol\",\"brand_name\"))\n\n\n\n\n\n\n\nmod_simple %&gt;%  \n\nplot_predictions(condition=c(\"avg_vol\",\"brand_name\"),   draw=FALSE)\n\n    rowid  estimate std.error statistic       p.value   s.value  conf.low\n1       4  75182.93  634.9763 118.40274  0.000000e+00       Inf  73938.40\n2       7  88256.06  690.7315 127.77189  0.000000e+00       Inf  86902.26\n3       1  87476.61  598.1267 146.25097  0.000000e+00       Inf  86304.31\n4       2 112464.84  602.8236 186.56344  0.000000e+00       Inf 111283.33\n5      10  55305.74  847.5537  65.25338  0.000000e+00       Inf  53644.57\n6       8  41600.50  717.1396  58.00893  0.000000e+00       Inf  40194.94\n7       3  98575.08  716.7132 137.53768  0.000000e+00       Inf  97170.35\n8       6  60404.65  620.6240  97.32891  0.000000e+00       Inf  59188.25\n9       9  75343.87  683.1283 110.29242  0.000000e+00       Inf  74004.97\n10      5  73345.61  676.9042 108.35449  0.000000e+00       Inf  72018.90\n11     14  77849.07  625.8719 124.38499  0.000000e+00       Inf  76622.38\n12     17  90922.20  679.5855 133.79066  0.000000e+00       Inf  89590.24\n13     11  90142.75  563.7441 159.90012  0.000000e+00       Inf  89037.83\n14     12 115130.97  596.3703 193.05284  0.000000e+00       Inf 113962.11\n15     20  57971.88  849.8823  68.21165  0.000000e+00       Inf  56306.14\n16     18  44266.64  723.7664  61.16150  0.000000e+00       Inf  42848.08\n17     13 101241.22  710.9418 142.40436  0.000000e+00       Inf  99847.79\n18     16  63070.79  622.9311 101.24842  0.000000e+00       Inf  61849.87\n19     19  78010.01  677.8138 115.09061  0.000000e+00       Inf  76681.52\n20     15  76011.74  663.7248 114.52297  0.000000e+00       Inf  74710.86\n21     24  80515.20  668.9076 120.36820  0.000000e+00       Inf  79204.17\n22     27  93588.33  716.7734 130.56894  0.000000e+00       Inf  92183.48\n23     21  92808.88  587.4183 157.99455  0.000000e+00       Inf  91657.56\n24     22 117797.11  644.2979 182.83020  0.000000e+00       Inf 116534.31\n25     30  60638.01  890.7602  68.07445  0.000000e+00       Inf  58892.15\n26     28  46932.77  774.9757  60.56032  0.000000e+00       Inf  45413.85\n27     23 103907.35  751.2654 138.30978  0.000000e+00       Inf 102434.90\n28     26  65736.92  676.8406  97.12320  0.000000e+00       Inf  64410.34\n29     29  80676.14  720.6940 111.94229  0.000000e+00       Inf  79263.61\n30     25  78677.87  700.0448 112.38977  0.000000e+00       Inf  77305.81\n31     34  83181.34  755.2219 110.14159  0.000000e+00       Inf  81701.13\n32     37  96254.47  795.5455 120.99179  0.000000e+00       Inf  94695.23\n33     31  95475.02  662.9586 144.01355  0.000000e+00       Inf  94175.64\n34     32 120463.24  736.0591 163.65974  0.000000e+00       Inf 119020.59\n35     40  63304.15  965.3023  65.57961  0.000000e+00       Inf  61412.19\n36     38  49598.91  862.8661  57.48158  0.000000e+00       Inf  47907.72\n37     33 106573.48  831.0006 128.24718  0.000000e+00       Inf 104944.75\n38     36  68403.06  771.6114  88.64962  0.000000e+00       Inf  66890.73\n39     39  83342.28  804.0953 103.64727  0.000000e+00       Inf  81766.28\n40     35  81344.01  778.9712 104.42492  0.000000e+00       Inf  79817.25\n41     44  85847.47  872.0572  98.44248  0.000000e+00       Inf  84138.27\n42     47  98920.60  905.1089 109.29139  0.000000e+00       Inf  97146.62\n43     41  98141.15  775.3508 126.57646  0.000000e+00       Inf  96621.49\n44     42 123129.38  857.6988 143.55783  0.000000e+00       Inf 121448.32\n45     50  65970.28 1066.4728  61.85838  0.000000e+00       Inf  63880.03\n46     48  52265.04  977.5938  53.46295  0.000000e+00       Inf  50349.00\n47     43 109239.62  940.1731 116.19097  0.000000e+00       Inf 107396.91\n48     46  71069.19  894.3468  79.46492  0.000000e+00       Inf  69316.30\n49     49  86008.41  917.0275  93.79044  0.000000e+00       Inf  84211.07\n50     45  84010.14  889.2305  94.47511  0.000000e+00       Inf  82267.28\n51     54  88513.61 1008.8649  87.73583  0.000000e+00       Inf  86536.27\n52     57 101586.74 1035.7377  98.08153  0.000000e+00       Inf  99556.73\n53     51 100807.29  911.0569 110.64873  0.000000e+00       Inf  99021.65\n54     52 125795.51  998.3549 126.00280  0.000000e+00       Inf 123838.77\n55     60  68636.41 1187.4851  57.79981  0.000000e+00       Inf  66308.99\n56     58  54931.18 1110.8745  49.44859  0.000000e+00       Inf  52753.90\n57     53 111905.75 1069.8083 104.60356  0.000000e+00       Inf 109808.97\n58     56  73735.33 1035.1469  71.23175  0.000000e+00       Inf  71706.48\n59     59  88674.55 1050.0051  84.45154  0.000000e+00       Inf  86616.57\n60     55  86676.28 1020.7185  84.91693  0.000000e+00       Inf  84675.71\n61     64  91179.74 1158.5915  78.69878  0.000000e+00       Inf  88908.94\n62     67 104252.87 1180.4593  88.31551  0.000000e+00       Inf 101939.22\n63     61 103473.42 1061.1699  97.50882  0.000000e+00       Inf 101393.57\n64     62 128461.65 1151.0772 111.60124  0.000000e+00       Inf 126205.58\n65     70  71302.55 1322.9054  53.89845  0.000000e+00       Inf  68709.70\n66     68  57597.31 1256.8197  45.82782  0.000000e+00       Inf  55133.99\n67     63 114571.89 1213.3653  94.42490  0.000000e+00       Inf 112193.74\n68     66  76401.46 1187.6040  64.33244  0.000000e+00       Inf  74073.80\n69     69  91340.68 1196.3624  76.34867  0.000000e+00       Inf  88995.85\n70     65  89342.41 1166.2773  76.60478  0.000000e+00       Inf  87056.55\n71     74  93845.87 1316.8375  71.26610  0.000000e+00       Inf  91264.92\n72     77 106919.01 1334.6973  80.10731  0.000000e+00       Inf 104303.05\n73     71 106139.56 1220.3849  86.97220  0.000000e+00       Inf 103747.65\n74     72 131127.78 1311.6578  99.97103  0.000000e+00       Inf 128556.98\n75     80  73968.68 1468.7537  50.36153  0.000000e+00       Inf  71089.98\n76     78  60263.45 1411.5064  42.69442  0.000000e+00       Inf  57496.95\n77     73 117238.02 1366.4632  85.79669  0.000000e+00       Inf 114559.80\n78     76  79067.60 1347.7679  58.66559  0.000000e+00       Inf  76426.02\n79     79  94006.82 1351.7605  69.54399  0.000000e+00       Inf  91357.41\n80     75  92008.55 1321.2645  69.63674  0.000000e+00       Inf  89418.92\n81     84  96512.01 1480.8743  65.17232  0.000000e+00       Inf  93609.55\n82     87 109585.14 1495.5100  73.27610  0.000000e+00       Inf 106654.00\n83     81 108805.69 1385.5678  78.52787  0.000000e+00       Inf 106090.03\n84     82 133793.92 1477.5367  90.55201  0.000000e+00       Inf 130898.00\n85     90  76634.82 1622.2199  47.24071  0.000000e+00       Inf  73455.33\n86     88  62929.58 1572.3568  40.02246  0.000000e+00       Inf  59847.82\n87     83 119904.16 1526.2336  78.56213  0.000000e+00       Inf 116912.79\n88     86  81733.73 1513.1934  54.01407  0.000000e+00       Inf  78767.93\n89     89  96672.95 1513.4169  63.87728  0.000000e+00       Inf  93706.71\n90     85  94674.68 1482.7267  63.85174  0.000000e+00       Inf  91768.59\n91     94  99178.14 1648.9747  60.14534  0.000000e+00       Inf  95946.21\n92     97 112251.28 1660.9892  67.58098  0.000000e+00       Inf 108995.80\n93     91 111471.83 1554.8177  71.69447  0.000000e+00       Inf 108424.44\n94     92 136460.05 1647.1138  82.84798  0.000000e+00       Inf 133231.77\n95    100  79300.95 1781.3361  44.51768  0.000000e+00       Inf  75809.60\n96     98  65595.72 1737.6601  37.74945  0.000000e+00       Inf  62189.97\n97     93 122570.29 1690.7861  72.49308  0.000000e+00       Inf 119256.41\n98     96  84399.87 1682.3292  50.16846  0.000000e+00       Inf  81102.56\n99     99  99339.09 1679.5256  59.14711  0.000000e+00       Inf  96047.28\n100    95  97340.82 1648.7626  59.03871  0.000000e+00       Inf  94109.30\n101   104 101844.28 1820.0130  55.95799  0.000000e+00       Inf  98277.12\n102   107 114917.41 1829.8690  62.80090  0.000000e+00       Inf 111330.93\n103   101 114137.96 1726.9392  66.09263  0.000000e+00       Inf 110753.22\n104   102 139126.18 1819.3555  76.47004  0.000000e+00       Inf 135560.31\n105   110  81967.09 1944.7159  42.14862  0.000000e+00       Inf  78155.52\n106   108  68261.85 1906.2582  35.80934 7.902353e-281  930.4795  64525.65\n107   103 125236.43 1858.8510  67.37303  0.000000e+00       Inf 121593.15\n108   106  87066.00 1854.1601  46.95711  0.000000e+00       Inf  83431.91\n109   109 102005.22 1848.8868  55.17115  0.000000e+00       Inf  98381.47\n110   105 100006.95 1818.1195  55.00571  0.000000e+00       Inf  96443.50\n111   114 104510.41 1993.2331  52.43261  0.000000e+00       Inf 100603.75\n112   117 117583.55 2001.2889  58.75391  0.000000e+00       Inf 113661.09\n113   111 116804.10 1901.1525  61.43857  0.000000e+00       Inf 113077.90\n114   112 141792.32 1993.5711  71.12479  0.000000e+00       Inf 137884.99\n115   120  84633.22 2111.3699  40.08451  0.000000e+00       Inf  80495.01\n116   118  70927.99 2077.3491  34.14351 1.669248e-255  846.3525  66856.46\n117   113 127902.56 2029.5560  63.01997  0.000000e+00       Inf 123924.71\n118   116  89732.13 2028.0012  44.24659  0.000000e+00       Inf  85757.33\n119   119 104671.35 2020.6831  51.79999  0.000000e+00       Inf 100710.89\n120   115 102673.09 1989.9498  51.59582  0.000000e+00       Inf  98772.86\n121   124 107176.55 2168.1121  49.43312  0.000000e+00       Inf 102927.13\n122   127 120249.68 2174.6483  55.29615  0.000000e+00       Inf 115987.45\n123   121 119470.23 2076.9314  57.52247  0.000000e+00       Inf 115399.52\n124   122 144458.45 2169.2851  66.59265  0.000000e+00       Inf 140206.73\n125   130  87299.36 2280.5804  38.27945  0.000000e+00       Inf  82829.50\n126   128  73594.12 2250.3642  32.70321 1.406206e-234  776.8394  69183.49\n127   123 130568.70 2202.2873  59.28777  0.000000e+00       Inf 126252.29\n128   126  92398.27 2203.3767  41.93485  0.000000e+00       Inf  88079.73\n129   129 107337.49 2194.3424  48.91556  0.000000e+00       Inf 103036.66\n130   125 105339.22 2163.6642  48.68557  0.000000e+00       Inf 101098.52\n131   134 109842.68 2344.2788  46.85564  0.000000e+00       Inf 105247.98\n132   137 122915.82 2349.5177  52.31534  0.000000e+00       Inf 118310.85\n133   131 122136.36 2253.9095  54.18867  0.000000e+00       Inf 117718.78\n134   132 147124.59 2346.1610  62.70865  0.000000e+00       Inf 142526.20\n135   140  89965.49 2451.8180  36.69338 9.312726e-295  976.7496  85160.02\n136   138  76260.26 2424.8917  31.44893 4.340993e-217  718.7404  71507.56\n137   133 133234.83 2376.6031  56.06104  0.000000e+00       Inf 128576.77\n138   136  95064.40 2379.9475  39.94391  0.000000e+00       Inf  90399.79\n139   139 110003.62 2369.4552  46.42570  0.000000e+00       Inf 105359.58\n140   135 108005.36 2338.8429  46.17897  0.000000e+00       Inf 103421.31\n141   144 112508.82 2521.4632  44.62045  0.000000e+00       Inf 107566.84\n142   147 125581.95 2525.5837  49.72393  0.000000e+00       Inf 120631.90\n143   141 124802.50 2431.8250  51.32051  0.000000e+00       Inf 120036.21\n144   142 149790.72 2523.9543  59.34764  0.000000e+00       Inf 144843.86\n145   150  92631.63 2624.6862  35.29246 7.665067e-273  903.9481  87487.34\n146   148  78926.39 2600.6271  30.34898 2.591240e-202  669.6558  73829.25\n147   143 135900.97 2552.1785  53.24901  0.000000e+00       Inf 130898.79\n148   146  97730.54 2557.4660  38.21382  0.000000e+00       Inf  92718.00\n149   149 112669.76 2545.7216  44.25848  0.000000e+00       Inf 107680.24\n150   145 110671.49 2515.1801  44.00142  0.000000e+00       Inf 105741.83\n151   154 115174.95 2699.4651  42.66584  0.000000e+00       Inf 109884.10\n152   157 128248.09 2702.6124  47.45338  0.000000e+00       Inf 122951.06\n153   151 127468.63 2610.4863  48.82946  0.000000e+00       Inf 122352.17\n154   152 152456.86 2702.4843  56.41360  0.000000e+00       Inf 147160.09\n155   160  95297.76 2798.8827  34.04850 4.271484e-254  841.6750  89812.05\n156   158  81592.53 2777.3412  29.37793 1.051391e-189  627.7721  76149.04\n157   153 138567.10 2728.7708  50.78004  0.000000e+00       Inf 133218.81\n158   156 100396.67 2735.7477  36.69807 7.838229e-295  976.9983  95034.71\n159   159 115335.89 2722.9175  42.35747  0.000000e+00       Inf 109999.07\n160   155 113337.63 2692.4480  42.09464  0.000000e+00       Inf 108060.52\n161   164 117841.09 2878.1327  40.94359  0.000000e+00       Inf 112200.05\n162   167 130914.22 2880.4263  45.44960  0.000000e+00       Inf 125268.69\n163   161 130134.77 2789.7501  46.64746  0.000000e+00       Inf 124666.96\n164   162 155122.99 2881.6136  53.83199  0.000000e+00       Inf 149475.13\n165   170  97963.90 2974.1743  32.93818 6.246070e-238  787.9759  92134.62\n166   168  84258.66 2954.8584  28.51530 7.570276e-179  591.7048  78467.24\n167   163 141233.24 2906.1943  48.59731  0.000000e+00       Inf 135537.20\n168   166 103062.81 2914.6526  35.36024 6.979270e-274  907.4052  97350.19\n169   169 118002.03 2900.8727  40.67811  0.000000e+00       Inf 112316.42\n170   165 116003.76 2870.4743  40.41275  0.000000e+00       Inf 110377.73\n171   174 120507.22 3057.3493  39.41559  0.000000e+00       Inf 114514.93\n172   177 133580.35 3058.8883  43.66958  0.000000e+00       Inf 127585.04\n173   171 132800.90 2969.5074  44.72153  0.000000e+00       Inf 126980.78\n174   172 157789.13 3061.2376  51.54423  0.000000e+00       Inf 151789.21\n175   180 100630.03 3150.3780  31.94221 6.931082e-224  741.3188  94455.40\n176   178  86924.79 3133.0421  27.74453 2.028217e-169  560.3856  80784.14\n177   173 143899.37 3084.3058  46.65535  0.000000e+00       Inf 137854.24\n178   176 105728.94 3094.0726  34.17145 6.422372e-256  847.7305  99664.67\n179   179 120668.16 3079.4554  39.18490  0.000000e+00       Inf 114632.54\n180   175 118669.89 3049.1262  38.91931  0.000000e+00       Inf 112693.72\n181   184 123173.36 3237.0237  38.05142  0.000000e+00       Inf 116828.91\n182   187 136246.49 3237.8916  42.07877  0.000000e+00       Inf 129900.34\n183   181 135467.04 3149.6735  43.00987  0.000000e+00       Inf 129293.79\n184   182 160455.26 3241.2734  49.50377  0.000000e+00       Inf 154102.48\n185   190 103296.17 3327.3490  31.04458 1.350004e-211  700.4939  96774.68\n186   188  89590.93 3311.7848  27.05216 3.602490e-161  532.9814  83099.95\n187   183 146565.50 3262.9924  44.91751  0.000000e+00       Inf 140170.16\n188   186 108395.08 3273.9229  33.10862 2.233332e-240  796.1035 101978.31\n189   189 123334.30 3258.5626  37.84929  0.000000e+00       Inf 116947.63\n190   185 121336.03 3228.2997  37.58512  0.000000e+00       Inf 115008.68\n191   194 125839.49 3417.0838  36.82657 6.936008e-297  983.8185 119142.13\n192   197 138912.62 3417.3507  40.64921  0.000000e+00       Inf 132214.74\n193   191 138133.17 3330.1821  41.47916  0.000000e+00       Inf 131606.14\n194   192 163121.40 3421.6565  47.67322  0.000000e+00       Inf 156415.07\n195   200 105962.30 3504.9711  30.23200 8.996071e-201  664.5383  99092.68\n196   198  92257.06 3491.0006  26.42711 6.688421e-154  508.8353  85414.83\n197   193 149231.64 3442.1649  43.35401  0.000000e+00       Inf 142485.12\n198   196 111061.21 3454.1364  32.15311 7.992229e-227  751.0791 104291.23\n199   199 126000.43 3438.1123  36.64814 4.898395e-294  974.3546 119261.86\n200   195 124002.16 3407.9127  36.38654 6.949323e-290  960.5623 117322.78\n201   204 128505.63 3597.4715  35.72110 1.860020e-279  925.9226 121454.71\n202   207 141578.76 3597.1978  39.35807  0.000000e+00       Inf 134528.38\n203   201 140799.31 3510.9805  40.10256  0.000000e+00       Inf 133917.91\n204   202 165787.53 3602.3344  46.02225  0.000000e+00       Inf 158727.09\n205   210 108628.44 3683.1501  29.49335 3.503620e-191  632.6794 101409.59\n206   208  94923.20 3670.6203  25.86026 1.865392e-147  487.4240  87728.91\n207   203 151897.77 3621.7506  41.94043  0.000000e+00       Inf 144799.27\n208   206 113727.35 3634.6591  31.28969 6.445845e-215  711.5262 106603.55\n209   209 128666.57 3618.0385  35.56252 5.321636e-277  917.7622 121575.34\n210   205 126668.30 3587.8990  35.30431 5.042942e-273  904.5521 119636.15\n211   214 131171.76 3778.1401  34.71861 4.127775e-264  874.9437 123766.74\n212   217 144244.89 3777.3772  38.18652  0.000000e+00       Inf 136841.37\n213   211 143465.44 3692.0260  38.85819  0.000000e+00       Inf 136229.20\n214   212 168453.67 3783.2651  44.52600  0.000000e+00       Inf 161038.60\n215   220 111294.57 3861.8088  28.81929 1.229804e-182  604.2925 103725.56\n216   218  97589.33 3850.5872  25.34401 1.046149e-141  468.3268  90042.32\n217   213 154563.91 3801.6915  40.65662  0.000000e+00       Inf 147112.73\n218   216 116393.48 3815.4470  30.50586 2.179131e-204  676.5496 108915.34\n219   219 131332.70 3798.2878  34.57682 5.636987e-262  867.8502 123888.19\n220   215 129334.43 3768.2053  34.32255 3.616943e-258  855.2027 121948.89\n221   224 133837.89 3959.0510  33.80555 1.634582e-250  829.7731 126078.30\n222   227 146911.03 3957.8437  37.11896 1.389563e-301  999.4257 139153.80\n223   221 146131.58 3873.2841  37.72808  0.000000e+00       Inf 138540.08\n224   222 171119.80 3964.4138  43.16396  0.000000e+00       Inf 163349.69\n225   230 113960.70 4040.8838  28.20193 5.538058e-175  578.8680 106040.72\n226   228 100255.47 4030.8550  24.87201 1.494775e-136  451.2023  92355.14\n227   223 157230.04 3981.9392  39.48580  0.000000e+00       Inf 149425.59\n228   226 119059.62 3996.4643  29.79124 5.073581e-195  645.4330 111226.69\n229   229 133998.84 3978.8163  33.67807 1.211096e-248  823.5619 126200.50\n230   225 132000.57 3948.7876  33.42813 5.352047e-245  811.4523 124261.09\n231   234 136504.03 4140.1724  32.97061 2.143012e-238  789.5192 128389.44\n232   237 149577.16 4138.5596  36.14232 4.911134e-286  947.7754 141465.73\n233   231 148797.71 4054.7261  36.69735 8.048866e-295  976.9600 140850.59\n234   232 173785.94 4145.7521  41.91904  0.000000e+00       Inf 165660.41\n235   240 116626.84 4220.3219  27.63458 4.275985e-168  555.9877 108355.16\n236   238 102921.60 4211.3849  24.43890 6.604512e-132  435.7711  94667.44\n237   233 159896.18 4162.4539  38.41392  0.000000e+00       Inf 151737.92\n238   236 121725.75 4177.6809  29.13716 1.215127e-186  617.5975 113537.65\n239   239 136664.97 4159.5875  32.85541 9.532618e-237  784.0441 128512.33\n240   235 134666.70 4129.6098  32.61003 2.956281e-233  772.4455 126572.82\n241   244 139170.16 4321.4779  32.20430 1.536570e-227  753.4580 130700.22\n242   247 152243.30 4319.4937  35.24563 4.002165e-272  901.5637 143777.25\n243   241 151463.85 4236.3284  35.75357 5.823368e-280  927.5980 143160.79\n244   242 176452.07 4327.2560  40.77690  0.000000e+00       Inf 167970.80\n245   250 119292.97 4400.0787  27.11155 7.195712e-162  535.3052 110668.98\n246   248 105587.74 4392.1447  24.04013 1.058759e-127  421.8025  96979.29\n247   243 162562.31 4343.2022  37.42914 1.312469e-306 1016.1177 154049.79\n248   246 124391.89 4359.0722  28.53632 4.152510e-179  592.5711 115848.26\n249   249 139331.11 4340.5713  32.09972 4.449260e-226  748.6022 130823.74\n250   245 137332.84 4310.6418  31.85902 9.871886e-223  737.4866 128884.14\n251   254 141836.30 4502.9454  31.49856 9.089678e-218  720.9961 133010.69\n252   257 154909.43 4500.6195  34.41958 1.284722e-259  860.0179 146088.38\n253   251 154129.98 4418.0714  34.88626 1.201313e-266  883.3683 145470.72\n254   252 179118.20 4508.9057  39.72543  0.000000e+00       Inf 170280.91\n255   260 121959.11 4580.1167  26.62795 3.223019e-156  516.5324 112982.24\n256   258 108253.87 4573.1070  23.67184 7.032986e-124  409.1049  99290.75\n257   253 165228.45 4524.1564  36.52138 5.076952e-292  967.6590 156361.26\n258   256 127058.02 4540.6170  27.98254 2.650058e-172  569.9656 118158.57\n259   259 141997.24 4521.7420  31.40322 1.828847e-216  716.6655 133134.79\n260   255 139998.97 4491.8580  31.16727 2.959211e-213  706.0055 131195.09\n261   264 144502.43 4684.5557  30.84656 6.229187e-209  691.6439 135320.87\n262   267 157575.57 4681.9150  33.65622 2.528465e-248  822.4999 148399.18\n263   261 156796.12 4599.9381  34.08657 1.166393e-254  843.5477 147780.40\n264   262 181784.34 4690.6841  38.75433  0.000000e+00       Inf 172590.77\n265   270 124625.24 4760.4041  26.17955 4.543400e-151  499.4274 115295.02\n266   268 110920.01 4754.2487  23.33071 2.163588e-120  397.5179 101601.85\n267   263 167894.58 4705.2924  35.68207 7.499946e-279  923.9111 158672.38\n268   266 129724.15 4722.2979  27.47056 3.947731e-166  549.4590 120468.62\n269   269 144663.37 4703.0779  30.75930 9.184015e-208  687.7619 135445.51\n270   265 142665.11 4673.2369  30.52811 1.104063e-204  677.5305 133505.73\n271   274 147168.57 4866.2931  30.24244 6.559712e-201  664.9939 137630.81\n272   277 160241.70 4863.3610  32.94876 4.407412e-238  788.4790 150709.69\n273   271 159462.25 4781.9148  33.34695 8.066610e-244  807.5385 150089.87\n274   272 184450.47 4872.5769  37.85481  0.000000e+00       Inf 174900.40\n275   280 127291.38 4940.9135  25.76272 2.321700e-146  483.7863 117607.37\n276   278 113586.14 4935.5502  23.01388 3.385302e-117  386.9063 103912.64\n277   273 170560.72 4886.5902  34.90383 6.503316e-267  884.2536 160983.18\n278   276 132390.29 4904.0995  26.99584 1.653786e-160  530.7827 122778.43\n279   279 147329.51 4884.5610  30.16228 7.403007e-200  661.4975 137755.95\n280   275 145331.24 4854.7607  29.93582 6.730466e-197  651.6691 135816.09\n281   284 149834.70 5048.1439  29.68115 1.344785e-193  640.7047 139940.52\n282   287 162907.84 5044.9415  32.29132 9.259595e-229  757.5106 153019.93\n283   281 162128.38 4963.9891  32.66091 5.610288e-234  774.8431 152399.14\n284   282 187116.61 5054.5716  37.01928 5.606659e-300  994.0913 177209.83\n285   290 129957.51 5121.6215  25.37429 4.848615e-142  469.4362 119919.32\n286   288 116252.28 5116.9944  22.71886 2.916853e-114  377.1554 106223.15\n287   283 173226.85 5068.0323  34.18030 4.745150e-256  848.1671 163293.69\n288   286 135056.42 5086.0091  26.55450 2.278634e-155  513.7107 125088.03\n289   289 149995.64 5066.1751  29.60728 1.204424e-192  637.5419 140066.12\n290   285 147997.38 5036.4134  29.38547 8.421518e-190  628.0923 138126.19\n291   294 152500.84 5230.0963  29.15832 6.552238e-187  618.4886 142250.04\n292   297 165573.97 5226.6423  31.67884 3.039808e-220  729.2202 155329.94\n293   291 164794.52 5146.1510  32.02287 5.240170e-225  745.0442 154708.25\n294   292 189782.74 5236.6576  36.24120 1.367490e-287  952.9418 179519.08\n295   300 132623.65 5302.5076  25.01150 4.583953e-138  456.2295 122230.92\n296   298 118918.41 5298.5667  22.44351 1.480987e-111  368.1675 108533.41\n297   293 175892.99 5249.6038  33.50595 3.947329e-246  815.2134 165603.95\n298   296 137722.56 5268.0155  26.14316 1.178908e-150  498.0518 127397.44\n299   299 152661.78 5247.9070  29.09003 4.799435e-186  615.6158 142376.07\n300   295 150663.51 5218.1818  28.87280 2.622006e-183  606.5222 140436.06\n301   304 155166.97 5412.1397  28.67017 8.986095e-181  598.1013 144559.37\n302   307 168240.11 5408.4514  31.10689 1.943460e-212  703.2901 157639.74\n303   301 167460.65 5328.3909  31.42800 8.389349e-217  717.7898 157017.20\n304   302 192448.88 5418.8258  35.51487 2.898084e-276  915.3171 181828.18\n305   310 135289.78 5483.5546  24.67191 2.141829e-134  444.0395 124542.21\n306   308 121584.55 5480.2543  22.18593 4.696089e-109  359.8587 110843.44\n307   303 178559.12 5431.2916  32.87600 4.843592e-237  785.0209 167913.98\n308   306 140388.69 5450.1087  25.75888 2.563591e-146  483.6433 129706.68\n309   309 155327.91 5429.7443  28.60686 5.520958e-180  595.4821 144685.81\n310   305 153329.65 5400.0538  28.39410 2.391698e-177  586.7232 142745.73\n311   314 157833.11 5594.2657  28.21337 4.008162e-175  579.3345 146868.55\n312   317 170906.24 5590.3580  30.57161 2.919360e-205  679.4496 159949.34\n313   311 170126.79 5510.7017  30.87207 2.832414e-209  692.7809 159326.01\n314   312 195115.01 5601.0683  34.83532 7.103443e-266  880.8044 184137.12\n315   320 137955.92 5664.7464  24.35341 5.334064e-131  432.7573 126853.22\n316   318 124250.68 5662.0461  21.94448 9.777110e-107  352.1569 113153.27\n317   313 181225.26 5613.0848  32.28621 1.092220e-228  757.2723 170223.81\n318   316 143054.83 5632.2807  25.39909 2.580638e-142  470.3461 132015.76\n319   319 157994.05 5611.6773  28.15451 2.110058e-174  576.9382 146995.36\n320   315 155995.78 5582.0197  27.94612 7.348806e-172  568.4941 145055.22\n321   324 160499.24 5776.4659  27.78502 6.580502e-170  562.0096 149177.58\n322   327 173572.37 5772.3531  30.06960 1.210311e-198  657.4664 162258.77\n323   321 172792.92 5693.0759  30.35142 2.406577e-202  669.7625 161634.70\n324   322 197781.15 5783.3776  34.19821 2.570947e-256  849.0513 186445.94\n325   330 140622.05 5846.0703  24.05412 7.559719e-128  422.2885 129163.96\n326   328 126916.81 5843.9324  21.71771 1.395716e-104  344.9995 115462.92\n327   323 183891.39 5794.9729  31.73292 5.464014e-221  731.6961 172533.45\n328   326 145720.96 5814.5234  25.06155 1.306585e-138  458.0403 134324.71\n329   329 160660.18 5793.6964  27.73017 3.022614e-169  559.8101 149304.75\n330   325 158661.92 5764.0701  27.52602 8.572409e-167  551.6623 147364.55\n331   334 163165.38 5958.7341  27.38256 4.425147e-165  545.9724 151486.47\n332   337 176238.51 5954.4285  29.59789 1.590761e-192  637.1405 164568.04\n333   331 175459.06 5875.5084  29.86279 5.990206e-196  648.5153 163943.27\n334   332 200447.28 5965.7483  33.59969 1.695193e-247  819.7548 188754.63\n335   340 143288.19 6027.5139  23.77235 6.453880e-125  412.5508 131474.48\n336   338 129582.95 6025.9047  21.50431 1.418660e-102  338.3321 117772.39\n337   333 186557.52 5976.9478  31.21284 7.133723e-214  708.0580 174842.92\n338   336 148387.10 5996.8313  24.74425 3.575141e-135  446.6223 136633.52\n339   339 163326.32 5975.7944  27.33131 1.801138e-164  543.9473 151613.98\n340   335 161328.05 5946.1979  27.13130 4.209576e-162  536.0787 149673.72\n341   344 165831.51 6141.0640  27.00371 1.336834e-160  531.0897 153795.25\n342   347 178904.64 6136.5772  29.15382 7.473435e-187  618.2988 166877.17\n343   341 178125.19 6057.9934  29.40333 4.978592e-190  628.8506 166251.74\n344   342 203113.42 6148.1743  33.03638 2.440842e-239  792.6534 191063.22\n345   350 145954.32 6209.0667  23.50664 3.488078e-122  403.4728 133784.77\n346   348 132249.08 6207.9554  21.30316 1.061092e-100  332.1073 120081.72\n347   343 189223.66 6159.0015  30.72311 2.797182e-207  686.1551 177152.24\n348   346 151053.23 6179.1980  24.44544 5.626536e-132  436.0023 138942.23\n349   349 165992.45 6157.9639  26.95574 4.886107e-160  529.2198 153923.06\n350   345 163994.18 6128.3957  26.75973 9.515481e-158  521.6144 151982.75\n351   354 168497.65 6323.4502  26.64647 1.966301e-156  517.2453 156103.91\n352   357 181570.78 6318.7926  28.73504 1.392958e-181  600.7908 169186.17\n353   351 180791.33 6240.5265  28.97052 1.547663e-184  610.6047 168560.12\n354   352 205779.55 6330.6509  32.50528 8.981246e-232  767.5204 193371.70\n355   360 148620.46 6390.7195  23.25567 1.246549e-119  394.9915 136094.88\n356   358 134915.22 6390.0776  21.11324  6.011208e-99  326.2832 122390.90\n357   353 191889.79 6341.1271  30.26115 3.722056e-201  665.8114 179461.41\n358   356 153719.37 6361.6186  24.16356 5.377745e-129  426.1017 141250.82\n359   359 168658.59 6340.1989  26.60147 6.528012e-156  515.5141 156232.03\n360   355 166660.32 6310.6576  26.40934 1.070253e-153  508.1570 154291.66\n361   364 171163.78 6505.8878  26.30906 1.510624e-152  504.3379 158412.47\n362   367 184236.91 6501.0693  28.33948 1.128249e-176  584.4853 171495.05\n363   361 183457.46 6423.1033  28.56212 1.986206e-179  593.6351 170868.41\n364   362 208445.69 6513.1742  32.00370 9.684752e-225  744.1581 195680.10\n365   370 151286.59 6572.4642  23.01824 3.060868e-117  387.0516 138404.80\n366   368 137581.35 6572.2658  20.93363  2.645840e-97  320.8233 124699.95\n367   363 194555.93 6523.3188  29.82468 1.869981e-195  646.8730 181770.46\n368   366 156385.50 6544.0885  23.89722 3.273769e-126  416.8520 143559.32\n369   369 171324.72 6522.4936  26.26675 4.600961e-152  502.7311 158540.87\n370   365 169326.45 6492.9781  26.07840 6.411131e-150  495.6086 156600.45\n371   374 173829.91 6688.3731  25.98986 6.447324e-149  492.2786 160720.94\n372   377 186903.05 6683.4022  27.96526 4.301045e-172  569.2669 173803.82\n373   371 186123.60 6605.7207  28.17612 1.147224e-174  577.8173 173176.62\n374   372 211111.82 6695.7401  31.52927 3.449727e-218  722.3938 197988.41\n375   380 153952.72 6754.2929  22.79331 5.341524e-115  379.6045 140714.55\n376   378 140247.49 6754.5141  20.76352  9.253425e-96  315.6951 127008.88\n377   373 197222.06 6705.5712  29.41167 3.894627e-190  629.2049 184079.39\n378   376 159051.64 6726.6040  23.64516 1.323678e-123  408.1926 145867.73\n379   379 173990.86 6704.8436  25.95002 1.817146e-148  490.7837 160849.60\n380   375 171992.59 6675.3528  25.76532 2.171223e-146  483.8830 158909.14\n381   384 176496.05 6870.9018  25.68746 1.613823e-145  480.9891 163029.33\n382   387 189569.18 6865.7868  27.61070 8.278058e-168  555.0346 176112.49\n383   381 188789.73 6788.3749  27.81074 3.216610e-170  563.0422 175484.76\n384   382 213777.96 6878.3453  31.07985 4.508886e-212  702.0760 200296.65\n385   390 156618.86 6936.1996  22.57992 6.826610e-113  372.6067 143024.16\n386   388 142913.62 6936.8183  20.60219  2.623294e-94  310.8699 129317.71\n387   383 199888.20 6887.8795  29.02028 3.650678e-185  612.6885 186388.20\n388   386 161717.77 6909.1611  23.40628 3.688314e-121  400.0703 148176.06\n389   389 176656.99 6887.2441  25.64988 4.240999e-145  479.5952 163158.24\n390   385 174658.72 6857.7767  25.46871 4.381144e-143  472.9044 161217.73\n391   394 179162.18 7053.4710  25.40057 2.485552e-142  470.4002 165337.64\n392   397 192235.32 7048.2192  27.27431 8.558109e-164  541.6989 178421.06\n393   391 191455.87 6971.0635  27.46437 4.680091e-166  549.2135 177792.83\n394   392 216444.09 7060.9868  30.65352 2.372210e-206  683.0710 202604.81\n395   400 159284.99 7118.1777  22.37722 6.561679e-111  366.0200 145333.62\n396   398 145579.76 7119.1737  20.44897  6.135913e-93  306.3220 131626.43\n397   393 202554.33 7070.2392  28.64887 1.656066e-180  597.2193 188696.92\n398   396 164383.91 7091.7569  23.17957 7.318315e-119  392.4379 150484.32\n399   399 179323.13 7069.6916  25.36506 6.130817e-142  469.0977 165466.78\n400   395 177324.86 7040.2467  25.18731 5.517825e-140  462.6058 163526.23\n401   404 181828.32 7236.0771  25.12802 2.457579e-139  460.4508 167645.87\n402   407 194901.45 7230.6957  26.95473 5.020605e-160  529.1806 180729.55\n403   401 194122.00 7153.7833  27.13557 3.747791e-162  536.2463 180100.84\n404   402 219110.23 7243.6617  30.24854 5.452340e-201  665.2607 204912.91\n405   410 161951.13 7300.2225  22.18441 4.857625e-109  359.8099 147642.96\n406   408 148245.89 7301.5768  20.30327  1.203043e-91  302.0288 133935.06\n407   403 205220.47 7252.6466  28.29594 3.876958e-176  582.7044 191005.54\n408   406 167050.04 7274.3881  22.96414 1.064474e-116  385.2535 152792.50\n409   409 181989.26 7252.1820  25.09441 5.723005e-139  459.2312 167775.24\n410   405 179990.99 7222.7587  24.91998 4.519589e-137  452.9280 165834.65\n411   414 184494.45 7418.7178  24.86878 1.620081e-136  451.0862 169954.03\n412   417 197567.59 7413.2130  26.65074 1.754853e-156  517.4094 183037.96\n413   411 196788.14 7336.5326  26.82304 1.740484e-158  524.0652 182408.80\n414   412 221776.36 7426.3677  29.86337 5.886870e-196  648.5404 207220.95\n415   420 164617.26 7482.3285  22.00081 2.829021e-107  353.9460 149952.17\n416   418 150912.03 7484.0237  20.16456  2.005326e-90  297.9697 136243.61\n417   413 207886.60 7435.0981  27.96017 4.959220e-172  569.0615 193314.08\n418   416 169716.17 7457.0526  22.75915 1.164837e-114  378.4797 155100.62\n419   419 184655.39 7434.7127  24.83692 3.580279e-136  449.9421 170083.63\n420   415 182657.13 7405.3100  24.66570 2.497465e-134  443.8179 168142.99\n421   424 187160.59 7601.3903  24.62189 7.364156e-134  442.2578 172262.14\n422   427 200233.72 7595.7683  26.36122 3.816860e-153  506.3226 185346.29\n423   421 199454.27 7519.3086  26.52561 4.910106e-155  512.6031 184716.70\n424   422 224442.49 7609.1024  29.49658 3.184958e-191  632.8170 209528.93\n425   430 167283.40 7664.4919  21.82576 1.321092e-105  348.4007 152261.27\n426   428 153578.16 7666.5118  20.03234  2.878187e-89  294.1264 138552.07\n427   423 210552.74 7617.5905  27.64033 3.647071e-168  556.2172 195622.53\n428   426 172382.31 7639.7476  22.56388 9.813806e-113  372.0831 157408.68\n429   429 187321.53 7617.2804  24.59165 1.551513e-133  441.1828 172391.93\n430   425 185323.26 7587.8974  24.42353 9.619065e-132  435.2286 170451.26\n431   434 189826.72 7784.0928  24.38649 2.378889e-131  433.9223 174570.18\n432   437 202899.86 7778.3587  26.08518 5.370594e-150  495.8641 187654.55\n433   431 202120.40 7702.1100  26.24221 8.771199e-152  501.8003 187024.55\n434   432 227108.63 7791.8639  29.14689 9.146707e-187  618.0073 211836.86\n435   440 169949.53 7846.7082  21.65870 5.031883e-104  343.1494 154570.27\n436   438 156244.30 7849.0377  19.90617  3.597764e-88  290.4826 140860.46\n437   433 213218.87 7800.1210  27.33533 1.613741e-164  544.1058 197930.92\n438   436 175048.44 7822.4712  22.37764 6.499482e-111  366.0337 159716.68\n439   439 189987.66 7799.8829  24.35776 4.797635e-131  432.9103 174700.17\n440   435 187989.40 7770.5189  24.19264 2.658932e-129  427.1179 172759.46\n441   444 192492.86 7966.8227  24.16181 5.610692e-129  426.0405 176878.17\n442   447 205565.99 7960.9819  25.82169 5.061804e-147  485.9838 189962.75\n443   441 204786.54 7884.9346  25.97188 1.029580e-148  491.6033 189332.35\n444   442 229774.76 7974.6505  28.81315 1.468127e-182  604.0369 214144.74\n445   450 172615.67 8028.9742  21.49909 1.587580e-102  338.1698 156879.17\n446   448 158910.43 8031.5991  19.78565  3.957415e-87  287.0232 143168.79\n447   443 215885.01 7982.6872  27.04415 4.474935e-161  532.6686 200239.23\n448   446 177714.58 8005.2214  22.19983 3.447275e-109  360.3047 162024.63\n449   449 192653.80 7982.5174  24.13447 1.087097e-128  425.0863 177008.35\n450   445 190655.53 7953.1716  23.97226 5.414924e-127  419.4479 175067.60\n451   454 195158.99 8149.5785  23.94713 9.899482e-127  418.5775 179186.11\n452   457 208232.13 8143.6359  25.56992 3.297273e-144  476.6364 192270.89\n453   451 207452.67 8067.7810  25.71372 8.210062e-146  481.9641 191640.11\n454   452 232440.90 8157.4600  28.49427 1.379344e-178  590.8392 216452.57\n455   460 175281.80 8211.2863  21.34645 4.207213e-101  333.4419 159187.98\n456   458 161576.57 8214.1937  19.67041  3.866347e-86  283.7348 145477.04\n457   453 218551.14 8165.2861  26.76589 8.066574e-158  521.8527 202547.47\n458   456 180380.71 8187.9963  22.02990 1.489118e-107  354.8718 164332.54\n459   459 195319.93 8165.1819  23.92108 1.848734e-126  417.6764 179316.47\n460   455 193321.67 8135.8537  23.76169 8.318260e-125  412.1847 177375.69\n461   464 197825.13 8332.3582  23.74179 1.335603e-124  411.5016 181494.00\n462   467 210898.26 8326.3183  25.32911 1.526847e-141  467.7813 194578.98\n463   461 210118.81 8250.6476  25.46695 4.582524e-143  472.8396 193947.84\n464   462 235107.03 8340.2914  28.18931 7.908163e-175  578.3541 218760.36\n465   470 177947.94 8393.6417  21.20033 9.483839e-100  328.9473 161496.70\n466   468 164242.70 8396.8192  19.56011  3.383519e-85  280.6054 147785.24\n467   463 221217.28 8347.9161  26.49970 9.769691e-155  511.6105 204855.66\n468   466 183046.85 8370.7942  21.86732 5.318962e-106  349.7132 166640.39\n469   469 197986.07 8347.8743  23.71694 2.411104e-124  410.6494 181624.54\n470   465 195987.80 8318.5629  23.56030 9.845929e-123  405.2976 179683.72\n471   474 200491.26 8515.1608  23.54521 1.405483e-122  404.7842 183801.85\n472   477 213564.39 8509.0277  25.09857 5.155834e-139  459.3818 196887.01\n473   471 212784.94 8433.5334  25.23082 1.839347e-140  464.1907 196255.52\n474   472 237773.17 8523.1431  27.89736 2.872486e-171  566.5274 221068.11\n475   480 180614.07 8576.0376  21.06032  1.839397e-98  324.6697 163805.35\n476   478 166908.83 8579.4736  19.45444  2.672684e-84  277.6237 150093.38\n477   473 223883.41 8530.5750  26.24482 8.190098e-152  501.8992 207163.79\n478   476 185712.98 8553.6140  21.71164 1.592746e-104  344.8090 168948.21\n479   479 200652.20 8530.5933  23.52148 2.459119e-122  403.9771 183932.55\n480   475 198653.94 8501.2981  23.36748 9.154236e-121  398.7589 181991.70\n481   484 203157.40 8697.9842  23.35684 1.174446e-120  398.3994 186109.66\n482   487 216230.53 8691.7619  24.87764 1.299139e-136  451.4047 199194.99\n483   481 215451.08 8616.4368  25.00466 5.439931e-138  455.9825 198563.17\n484   482 240439.30 8706.0138  27.61761 6.838189e-168  555.3103 223375.83\n485   490 183280.21 8758.4714  20.92605  3.101621e-97  320.5940 166113.92\n486   488 169574.97 8762.1552  19.35311  1.918988e-83  274.7797 152401.46\n487   483 226549.55 8713.2609  26.00055 4.882170e-149  492.6798 209471.87\n488   486 188379.12 8736.4539  21.56242 4.048446e-103  340.1412 171255.98\n489   489 203318.34 8713.3366  23.33415 1.996315e-120  397.6340 186240.51\n490   485 201320.07 8684.0570  23.18272 6.802583e-119  392.5434 184299.63\n491   494 205823.53 8880.8277  23.17617 7.921181e-119  392.3237 188417.43\n492   497 218896.66 8874.5197  24.66575 2.494294e-134  443.8197 201502.93\n493   491 218117.21 8799.3571  24.78786 1.212004e-135  448.1829 200870.79\n494   492 243105.44 8888.9025  27.34932 1.100202e-164  544.6584 225683.51\n495   500 185946.34 8940.9408  20.79718  4.590316e-96  316.7065 168422.42\n496   498 172241.10 8944.8623  19.25587  1.260400e-82  272.0642 154709.50\n497   493 229215.68 8895.9725  25.76623 2.120703e-146  483.9170 211779.89\n498   496 191045.25 8919.3132  21.41928 8.834682e-102  335.6935 173563.72\n499   499 205984.47 8896.1033  23.15446 1.310860e-118  391.5970 188548.43\n500   495 203986.20 8866.8387  23.00552 4.104792e-117  386.6283 186607.52\n    conf.high      rev color_name   avg_vol           brand_name\n1    76427.46 37508.44      Black   4.00000             A. Datum\n2    89609.87 37508.44      Black   4.00000      Adventure Works\n3    88648.92 37508.44      Black   4.00000              Contoso\n4   113646.35 37508.44      Black   4.00000             Fabrikam\n5    56966.92 37508.44      Black   4.00000              Litware\n6    43006.07 37508.44      Black   4.00000    Northwind Traders\n7    99979.81 37508.44      Black   4.00000            Proseware\n8    61621.05 37508.44      Black   4.00000     Southridge Video\n9    76682.78 37508.44      Black   4.00000    The Phone Company\n10   74672.31 37508.44      Black   4.00000 Wide World Importers\n11   79075.75 37508.44      Black  16.16327             A. Datum\n12   92254.16 37508.44      Black  16.16327      Adventure Works\n13   91247.67 37508.44      Black  16.16327              Contoso\n14  116299.84 37508.44      Black  16.16327             Fabrikam\n15   59637.61 37508.44      Black  16.16327              Litware\n16   45685.20 37508.44      Black  16.16327    Northwind Traders\n17  102634.64 37508.44      Black  16.16327            Proseware\n18   64291.71 37508.44      Black  16.16327     Southridge Video\n19   79338.50 37508.44      Black  16.16327    The Phone Company\n20   77312.62 37508.44      Black  16.16327 Wide World Importers\n21   81826.24 37508.44      Black  28.32653             A. Datum\n22   94993.18 37508.44      Black  28.32653      Adventure Works\n23   93960.20 37508.44      Black  28.32653              Contoso\n24  119059.91 37508.44      Black  28.32653             Fabrikam\n25   62383.87 37508.44      Black  28.32653              Litware\n26   48451.70 37508.44      Black  28.32653    Northwind Traders\n27  105379.80 37508.44      Black  28.32653            Proseware\n28   67063.51 37508.44      Black  28.32653     Southridge Video\n29   82088.68 37508.44      Black  28.32653    The Phone Company\n30   80049.94 37508.44      Black  28.32653 Wide World Importers\n31   84661.54 37508.44      Black  40.48980             A. Datum\n32   97813.71 37508.44      Black  40.48980      Adventure Works\n33   96774.39 37508.44      Black  40.48980              Contoso\n34  121905.89 37508.44      Black  40.48980             Fabrikam\n35   65196.10 37508.44      Black  40.48980              Litware\n36   51290.10 37508.44      Black  40.48980    Northwind Traders\n37  108202.22 37508.44      Black  40.48980            Proseware\n38   69915.39 37508.44      Black  40.48980     Southridge Video\n39   84918.27 37508.44      Black  40.48980    The Phone Company\n40   82870.76 37508.44      Black  40.48980 Wide World Importers\n41   87556.67 37508.44      Black  52.65306             A. Datum\n42  100694.58 37508.44      Black  52.65306      Adventure Works\n43   99660.81 37508.44      Black  52.65306              Contoso\n44  124810.44 37508.44      Black  52.65306             Fabrikam\n45   68060.53 37508.44      Black  52.65306              Litware\n46   54181.09 37508.44      Black  52.65306    Northwind Traders\n47  111082.32 37508.44      Black  52.65306            Proseware\n48   72822.08 37508.44      Black  52.65306     Southridge Video\n49   87805.75 37508.44      Black  52.65306    The Phone Company\n50   85753.00 37508.44      Black  52.65306 Wide World Importers\n51   90490.94 37508.44      Black  64.81633             A. Datum\n52  103616.75 37508.44      Black  64.81633      Adventure Works\n53  102592.93 37508.44      Black  64.81633              Contoso\n54  127752.25 37508.44      Black  64.81633             Fabrikam\n55   70963.84 37508.44      Black  64.81633              Litware\n56   57108.45 37508.44      Black  64.81633    Northwind Traders\n57  114002.54 37508.44      Black  64.81633            Proseware\n58   75764.18 37508.44      Black  64.81633     Southridge Video\n59   90732.52 37508.44      Black  64.81633    The Phone Company\n60   88676.85 37508.44      Black  64.81633 Wide World Importers\n61   93450.54 37508.44      Black  76.97959             A. Datum\n62  106566.53 37508.44      Black  76.97959      Adventure Works\n63  105553.28 37508.44      Black  76.97959              Contoso\n64  130717.72 37508.44      Black  76.97959             Fabrikam\n65   73895.40 37508.44      Black  76.97959              Litware\n66   60060.63 37508.44      Black  76.97959    Northwind Traders\n67  116950.04 37508.44      Black  76.97959            Proseware\n68   78729.12 37508.44      Black  76.97959     Southridge Video\n69   93685.51 37508.44      Black  76.97959    The Phone Company\n70   91628.27 37508.44      Black  76.97959 Wide World Importers\n71   96426.83 37508.44      Black  89.14286             A. Datum\n72  109534.97 37508.44      Black  89.14286      Adventure Works\n73  108531.47 37508.44      Black  89.14286              Contoso\n74  133698.58 37508.44      Black  89.14286             Fabrikam\n75   76847.39 37508.44      Black  89.14286              Litware\n76   63029.95 37508.44      Black  89.14286    Northwind Traders\n77  119916.24 37508.44      Black  89.14286            Proseware\n78   81709.17 37508.44      Black  89.14286     Southridge Video\n79   96656.22 37508.44      Black  89.14286    The Phone Company\n80   94598.18 37508.44      Black  89.14286 Wide World Importers\n81   99414.47 37508.44      Black 101.30612             A. Datum\n82  112516.29 37508.44      Black 101.30612      Adventure Works\n83  111521.35 37508.44      Black 101.30612              Contoso\n84  136689.83 37508.44      Black 101.30612             Fabrikam\n85   79814.31 37508.44      Black 101.30612              Litware\n86   66011.35 37508.44      Black 101.30612    Northwind Traders\n87  122895.52 37508.44      Black 101.30612            Proseware\n88   84699.54 37508.44      Black 101.30612     Southridge Video\n89   99639.19 37508.44      Black 101.30612    The Phone Company\n90   97580.77 37508.44      Black 101.30612 Wide World Importers\n91  102410.07 37508.44      Black 113.46939             A. Datum\n92  115506.76 37508.44      Black 113.46939      Adventure Works\n93  114519.21 37508.44      Black 113.46939              Contoso\n94  139688.33 37508.44      Black 113.46939             Fabrikam\n95   82792.31 37508.44      Black 113.46939              Litware\n96   69001.47 37508.44      Black 113.46939    Northwind Traders\n97  125884.17 37508.44      Black 113.46939            Proseware\n98   87697.17 37508.44      Black 113.46939     Southridge Video\n99  102630.89 37508.44      Black 113.46939    The Phone Company\n100 100572.33 37508.44      Black 113.46939 Wide World Importers\n101 105411.44 37508.44      Black 125.63265             A. Datum\n102 118503.89 37508.44      Black 125.63265      Adventure Works\n103 117522.70 37508.44      Black 125.63265              Contoso\n104 142692.06 37508.44      Black 125.63265             Fabrikam\n105  85778.66 37508.44      Black 125.63265              Litware\n106  71998.05 37508.44      Black 125.63265    Northwind Traders\n107 128879.71 37508.44      Black 125.63265            Proseware\n108  90700.09 37508.44      Black 125.63265     Southridge Video\n109 105628.97 37508.44      Black 125.63265    The Phone Company\n110 103570.40 37508.44      Black 125.63265 Wide World Importers\n111 108417.08 37508.44      Black 137.79592             A. Datum\n112 121506.00 37508.44      Black 137.79592      Adventure Works\n113 120530.29 37508.44      Black 137.79592              Contoso\n114 145699.65 37508.44      Black 137.79592             Fabrikam\n115  88771.43 37508.44      Black 137.79592              Litware\n116  74999.52 37508.44      Black 137.79592    Northwind Traders\n117 131880.42 37508.44      Black 137.79592            Proseware\n118  93706.94 37508.44      Black 137.79592     Southridge Video\n119 108631.82 37508.44      Black 137.79592    The Phone Company\n120 106573.32 37508.44      Black 137.79592 Wide World Importers\n121 111425.97 37508.44      Black 149.95918             A. Datum\n122 124511.91 37508.44      Black 149.95918      Adventure Works\n123 123540.94 37508.44      Black 149.95918              Contoso\n124 148710.17 37508.44      Black 149.95918             Fabrikam\n125  91769.21 37508.44      Black 149.95918              Litware\n126  78004.75 37508.44      Black 149.95918    Northwind Traders\n127 134885.10 37508.44      Black 149.95918            Proseware\n128  96716.81 37508.44      Black 149.95918     Southridge Video\n129 111638.32 37508.44      Black 149.95918    The Phone Company\n130 109579.93 37508.44      Black 149.95918 Wide World Importers\n131 114437.38 37508.44      Black 162.12245             A. Datum\n132 127520.79 37508.44      Black 162.12245      Adventure Works\n133 126553.95 37508.44      Black 162.12245              Contoso\n134 151722.98 37508.44      Black 162.12245             Fabrikam\n135  94770.97 37508.44      Black 162.12245              Litware\n136  81012.96 37508.44      Black 162.12245    Northwind Traders\n137 137892.89 37508.44      Black 162.12245            Proseware\n138  99729.02 37508.44      Black 162.12245     Southridge Video\n139 114647.67 37508.44      Black 162.12245    The Phone Company\n140 112589.40 37508.44      Black 162.12245 Wide World Importers\n141 117450.79 37508.44      Black 174.28571             A. Datum\n142 130532.00 37508.44      Black 174.28571      Adventure Works\n143 129568.79 37508.44      Black 174.28571              Contoso\n144 154737.58 37508.44      Black 174.28571             Fabrikam\n145  97775.92 37508.44      Black 174.28571              Litware\n146  84023.53 37508.44      Black 174.28571    Northwind Traders\n147 140903.14 37508.44      Black 174.28571            Proseware\n148 102743.08 37508.44      Black 174.28571     Southridge Video\n149 117659.28 37508.44      Black 174.28571    The Phone Company\n150 115601.15 37508.44      Black 174.28571 Wide World Importers\n151 120465.81 37508.44      Black 186.44898             A. Datum\n152 133545.11 37508.44      Black 186.44898      Adventure Works\n153 132585.09 37508.44      Black 186.44898              Contoso\n154 157753.63 37508.44      Black 186.44898             Fabrikam\n155 100783.47 37508.44      Black 186.44898              Litware\n156  87036.01 37508.44      Black 186.44898    Northwind Traders\n157 143915.39 37508.44      Black 186.44898            Proseware\n158 105758.64 37508.44      Black 186.44898     Southridge Video\n159 120672.71 37508.44      Black 186.44898    The Phone Company\n160 118614.73 37508.44      Black 186.44898 Wide World Importers\n161 123482.12 37508.44      Black 198.61224             A. Datum\n162 136559.75 37508.44      Black 198.61224      Adventure Works\n163 135602.58 37508.44      Black 198.61224              Contoso\n164 160770.85 37508.44      Black 198.61224             Fabrikam\n165 103793.17 37508.44      Black 198.61224              Litware\n166  90050.08 37508.44      Black 198.61224    Northwind Traders\n167 146929.27 37508.44      Black 198.61224            Proseware\n168 108775.42 37508.44      Black 198.61224     Southridge Video\n169 123687.63 37508.44      Black 198.61224    The Phone Company\n170 121629.79 37508.44      Black 198.61224 Wide World Importers\n171 126499.52 37508.44      Black 210.77551             A. Datum\n172 139575.67 37508.44      Black 210.77551      Adventure Works\n173 138621.03 37508.44      Black 210.77551              Contoso\n174 163789.04 37508.44      Black 210.77551             Fabrikam\n175 106804.66 37508.44      Black 210.77551              Litware\n176  93065.44 37508.44      Black 210.77551    Northwind Traders\n177 149944.50 37508.44      Black 210.77551            Proseware\n178 111793.21 37508.44      Black 210.77551     Southridge Video\n179 126703.78 37508.44      Black 210.77551    The Phone Company\n180 124646.07 37508.44      Black 210.77551 Wide World Importers\n181 129517.81 37508.44      Black 222.93878             A. Datum\n182 142592.64 37508.44      Black 222.93878      Adventure Works\n183 141640.28 37508.44      Black 222.93878              Contoso\n184 166808.04 37508.44      Black 222.93878             Fabrikam\n185 109817.65 37508.44      Black 222.93878              Litware\n186  96081.91 37508.44      Black 222.93878    Northwind Traders\n187 152960.85 37508.44      Black 222.93878            Proseware\n188 114811.85 37508.44      Black 222.93878     Southridge Video\n189 129720.96 37508.44      Black 222.93878    The Phone Company\n190 127663.38 37508.44      Black 222.93878 Wide World Importers\n191 132536.85 37508.44      Black 235.10204             A. Datum\n192 145610.51 37508.44      Black 235.10204      Adventure Works\n193 144660.21 37508.44      Black 235.10204              Contoso\n194 169827.72 37508.44      Black 235.10204             Fabrikam\n195 112831.92 37508.44      Black 235.10204              Litware\n196  99099.30 37508.44      Black 235.10204    Northwind Traders\n197 155978.16 37508.44      Black 235.10204            Proseware\n198 117831.19 37508.44      Black 235.10204     Southridge Video\n199 132739.01 37508.44      Black 235.10204    The Phone Company\n200 130681.55 37508.44      Black 235.10204 Wide World Importers\n201 135556.54 37508.44      Black 247.26531             A. Datum\n202 148629.14 37508.44      Black 247.26531      Adventure Works\n203 147680.70 37508.44      Black 247.26531              Contoso\n204 172847.98 37508.44      Black 247.26531             Fabrikam\n205 115847.28 37508.44      Black 247.26531              Litware\n206 102117.48 37508.44      Black 247.26531    Northwind Traders\n207 158996.27 37508.44      Black 247.26531            Proseware\n208 120851.15 37508.44      Black 247.26531     Southridge Video\n209 135757.79 37508.44      Black 247.26531    The Phone Company\n210 133700.45 37508.44      Black 247.26531 Wide World Importers\n211 138576.78 37508.44      Black 259.42857             A. Datum\n212 151648.42 37508.44      Black 259.42857      Adventure Works\n213 150701.68 37508.44      Black 259.42857              Contoso\n214 175868.73 37508.44      Black 259.42857             Fabrikam\n215 118863.58 37508.44      Black 259.42857              Litware\n216 105136.35 37508.44      Black 259.42857    Northwind Traders\n217 162015.09 37508.44      Black 259.42857            Proseware\n218 123871.62 37508.44      Black 259.42857     Southridge Video\n219 138777.21 37508.44      Black 259.42857    The Phone Company\n220 136719.98 37508.44      Black 259.42857 Wide World Importers\n221 141597.49 37508.44      Black 271.59184             A. Datum\n222 154668.26 37508.44      Black 271.59184      Adventure Works\n223 153723.07 37508.44      Black 271.59184              Contoso\n224 178889.91 37508.44      Black 271.59184             Fabrikam\n225 121880.69 37508.44      Black 271.59184              Litware\n226 108155.80 37508.44      Black 271.59184    Northwind Traders\n227 165034.50 37508.44      Black 271.59184            Proseware\n228 126892.54 37508.44      Black 271.59184     Southridge Video\n229 141797.17 37508.44      Black 271.59184    The Phone Company\n230 139740.05 37508.44      Black 271.59184 Wide World Importers\n231 144618.62 37508.44      Black 283.75510             A. Datum\n232 157688.59 37508.44      Black 283.75510      Adventure Works\n233 156744.83 37508.44      Black 283.75510              Contoso\n234 181911.46 37508.44      Black 283.75510             Fabrikam\n235 124898.52 37508.44      Black 283.75510              Litware\n236 111175.77 37508.44      Black 283.75510    Northwind Traders\n237 168054.44 37508.44      Black 283.75510            Proseware\n238 129913.85 37508.44      Black 283.75510     Southridge Video\n239 144817.61 37508.44      Black 283.75510    The Phone Company\n240 142760.59 37508.44      Black 283.75510 Wide World Importers\n241 147640.11 37508.44      Black 295.91837             A. Datum\n242 160709.35 37508.44      Black 295.91837      Adventure Works\n243 159766.90 37508.44      Black 295.91837              Contoso\n244 184933.34 37508.44      Black 295.91837             Fabrikam\n245 127916.97 37508.44      Black 295.91837              Litware\n246 114196.18 37508.44      Black 295.91837    Northwind Traders\n247 171074.83 37508.44      Black 295.91837            Proseware\n248 132935.51 37508.44      Black 295.91837     Southridge Video\n249 147838.47 37508.44      Black 295.91837    The Phone Company\n250 145781.54 37508.44      Black 295.91837 Wide World Importers\n251 150661.91 37508.44      Black 308.08163             A. Datum\n252 163730.48 37508.44      Black 308.08163      Adventure Works\n253 162789.24 37508.44      Black 308.08163              Contoso\n254 187955.50 37508.44      Black 308.08163             Fabrikam\n255 130935.97 37508.44      Black 308.08163              Litware\n256 117217.00 37508.44      Black 308.08163    Northwind Traders\n257 174095.63 37508.44      Black 308.08163            Proseware\n258 135957.47 37508.44      Black 308.08163     Southridge Video\n259 150859.69 37508.44      Black 308.08163    The Phone Company\n260 148802.85 37508.44      Black 308.08163 Wide World Importers\n261 153683.99 37508.44      Black 320.24490             A. Datum\n262 166751.95 37508.44      Black 320.24490      Adventure Works\n263 165811.83 37508.44      Black 320.24490              Contoso\n264 190977.91 37508.44      Black 320.24490             Fabrikam\n265 133955.46 37508.44      Black 320.24490              Litware\n266 120238.16 37508.44      Black 320.24490    Northwind Traders\n267 177116.79 37508.44      Black 320.24490            Proseware\n268 138979.69 37508.44      Black 320.24490     Southridge Video\n269 153881.24 37508.44      Black 320.24490    The Phone Company\n270 151824.48 37508.44      Black 320.24490 Wide World Importers\n271 156706.33 37508.44      Black 332.40816             A. Datum\n272 169773.71 37508.44      Black 332.40816      Adventure Works\n273 168834.63 37508.44      Black 332.40816              Contoso\n274 194000.55 37508.44      Black 332.40816             Fabrikam\n275 136975.39 37508.44      Black 332.40816              Litware\n276 123259.64 37508.44      Black 332.40816    Northwind Traders\n277 180138.26 37508.44      Black 332.40816            Proseware\n278 142002.15 37508.44      Black 332.40816     Southridge Video\n279 156903.07 37508.44      Black 332.40816    The Phone Company\n280 154846.40 37508.44      Black 332.40816 Wide World Importers\n281 159728.88 37508.44      Black 344.57143             A. Datum\n282 172795.74 37508.44      Black 344.57143      Adventure Works\n283 171857.62 37508.44      Black 344.57143              Contoso\n284 197023.39 37508.44      Black 344.57143             Fabrikam\n285 139995.71 37508.44      Black 344.57143              Litware\n286 126281.40 37508.44      Black 344.57143    Northwind Traders\n287 183160.01 37508.44      Black 344.57143            Proseware\n288 145024.82 37508.44      Black 344.57143     Southridge Video\n289 159925.16 37508.44      Black 344.57143    The Phone Company\n290 157868.57 37508.44      Black 344.57143 Wide World Importers\n291 162751.64 37508.44      Black 356.73469             A. Datum\n292 175818.00 37508.44      Black 356.73469      Adventure Works\n293 174880.79 37508.44      Black 356.73469              Contoso\n294 200046.40 37508.44      Black 356.73469             Fabrikam\n295 143016.37 37508.44      Black 356.73469              Litware\n296 129303.41 37508.44      Black 356.73469    Northwind Traders\n297 186182.02 37508.44      Black 356.73469            Proseware\n298 148047.68 37508.44      Black 356.73469     Southridge Video\n299 162947.49 37508.44      Black 356.73469    The Phone Company\n300 160890.96 37508.44      Black 356.73469 Wide World Importers\n301 165774.57 37508.44      Black 368.89796             A. Datum\n302 178840.48 37508.44      Black 368.89796      Adventure Works\n303 177904.11 37508.44      Black 368.89796              Contoso\n304 203069.58 37508.44      Black 368.89796             Fabrikam\n305 146037.35 37508.44      Black 368.89796              Litware\n306 132325.65 37508.44      Black 368.89796    Northwind Traders\n307 189204.26 37508.44      Black 368.89796            Proseware\n308 151070.71 37508.44      Black 368.89796     Southridge Video\n309 165970.02 37508.44      Black 368.89796    The Phone Company\n310 163913.56 37508.44      Black 368.89796 Wide World Importers\n311 168797.67 37508.44      Black 381.06122             A. Datum\n312 181863.14 37508.44      Black 381.06122      Adventure Works\n313 180927.57 37508.44      Black 381.06122              Contoso\n314 206092.91 37508.44      Black 381.06122             Fabrikam\n315 149058.62 37508.44      Black 381.06122              Litware\n316 135348.09 37508.44      Black 381.06122    Northwind Traders\n317 192226.70 37508.44      Black 381.06122            Proseware\n318 154093.90 37508.44      Black 381.06122     Southridge Video\n319 168992.73 37508.44      Black 381.06122    The Phone Company\n320 166936.34 37508.44      Black 381.06122 Wide World Importers\n321 171820.91 37508.44      Black 393.22449             A. Datum\n322 184885.98 37508.44      Black 393.22449      Adventure Works\n323 183951.15 37508.44      Black 393.22449              Contoso\n324 209116.36 37508.44      Black 393.22449             Fabrikam\n325 152080.14 37508.44      Black 393.22449              Litware\n326 138370.71 37508.44      Black 393.22449    Northwind Traders\n327 195249.33 37508.44      Black 393.22449            Proseware\n328 157117.22 37508.44      Black 393.22449     Southridge Video\n329 172015.62 37508.44      Black 393.22449    The Phone Company\n330 169959.28 37508.44      Black 393.22449 Wide World Importers\n331 174844.28 37508.44      Black 405.38776             A. Datum\n332 187908.97 37508.44      Black 405.38776      Adventure Works\n333 186974.84 37508.44      Black 405.38776              Contoso\n334 212139.93 37508.44      Black 405.38776             Fabrikam\n335 155101.90 37508.44      Black 405.38776              Litware\n336 141393.51 37508.44      Black 405.38776    Northwind Traders\n337 198272.13 37508.44      Black 405.38776            Proseware\n338 160140.67 37508.44      Black 405.38776     Southridge Video\n339 175038.66 37508.44      Black 405.38776    The Phone Company\n340 172982.38 37508.44      Black 405.38776 Wide World Importers\n341 177867.78 37508.44      Black 417.55102             A. Datum\n342 190932.11 37508.44      Black 417.55102      Adventure Works\n343 189998.64 37508.44      Black 417.55102              Contoso\n344 215163.62 37508.44      Black 417.55102             Fabrikam\n345 158123.87 37508.44      Black 417.55102              Litware\n346 144416.45 37508.44      Black 417.55102    Northwind Traders\n347 201295.08 37508.44      Black 417.55102            Proseware\n348 163164.24 37508.44      Black 417.55102     Southridge Video\n349 178061.84 37508.44      Black 417.55102    The Phone Company\n350 176005.62 37508.44      Black 417.55102 Wide World Importers\n351 180891.38 37508.44      Black 429.71429             A. Datum\n352 193955.38 37508.44      Black 429.71429      Adventure Works\n353 193022.53 37508.44      Black 429.71429              Contoso\n354 218187.40 37508.44      Black 429.71429             Fabrikam\n355 161146.04 37508.44      Black 429.71429              Litware\n356 147439.54 37508.44      Black 429.71429    Northwind Traders\n357 204318.17 37508.44      Black 429.71429            Proseware\n358 166187.91 37508.44      Black 429.71429     Southridge Video\n359 181085.15 37508.44      Black 429.71429    The Phone Company\n360 179028.98 37508.44      Black 429.71429 Wide World Importers\n361 183915.09 37508.44      Black 441.87755             A. Datum\n362 196978.78 37508.44      Black 441.87755      Adventure Works\n363 196046.51 37508.44      Black 441.87755              Contoso\n364 221211.27 37508.44      Black 441.87755             Fabrikam\n365 164168.38 37508.44      Black 441.87755              Litware\n366 150462.76 37508.44      Black 441.87755    Northwind Traders\n367 207341.40 37508.44      Black 441.87755            Proseware\n368 169211.68 37508.44      Black 441.87755     Southridge Video\n369 184108.57 37508.44      Black 441.87755    The Phone Company\n370 182052.46 37508.44      Black 441.87755 Wide World Importers\n371 186938.89 37508.44      Black 454.04082             A. Datum\n372 200002.28 37508.44      Black 454.04082      Adventure Works\n373 199070.57 37508.44      Black 454.04082              Contoso\n374 224235.23 37508.44      Black 454.04082             Fabrikam\n375 167190.90 37508.44      Black 454.04082              Litware\n376 153486.09 37508.44      Black 454.04082    Northwind Traders\n377 210364.74 37508.44      Black 454.04082            Proseware\n378 172235.54 37508.44      Black 454.04082     Southridge Video\n379 187132.11 37508.44      Black 454.04082    The Phone Company\n380 185076.04 37508.44      Black 454.04082 Wide World Importers\n381 189962.77 37508.44      Black 466.20408             A. Datum\n382 203025.88 37508.44      Black 466.20408      Adventure Works\n383 202094.70 37508.44      Black 466.20408              Contoso\n384 227259.26 37508.44      Black 466.20408             Fabrikam\n385 170213.56 37508.44      Black 466.20408              Litware\n386 156509.54 37508.44      Black 466.20408    Northwind Traders\n387 213388.19 37508.44      Black 466.20408            Proseware\n388 175259.48 37508.44      Black 466.20408     Southridge Video\n389 190155.74 37508.44      Black 466.20408    The Phone Company\n390 188099.72 37508.44      Black 466.20408 Wide World Importers\n391 192986.73 37508.44      Black 478.36735             A. Datum\n392 206049.57 37508.44      Black 478.36735      Adventure Works\n393 205118.90 37508.44      Black 478.36735              Contoso\n394 230283.37 37508.44      Black 478.36735             Fabrikam\n395 173236.37 37508.44      Black 478.36735              Litware\n396 159533.08 37508.44      Black 478.36735    Northwind Traders\n397 216411.75 37508.44      Black 478.36735            Proseware\n398 178283.49 37508.44      Black 478.36735     Southridge Video\n399 193179.47 37508.44      Black 478.36735    The Phone Company\n400 191123.49 37508.44      Black 478.36735 Wide World Importers\n401 196010.77 37508.44      Black 490.53061             A. Datum\n402 209073.36 37508.44      Black 490.53061      Adventure Works\n403 208143.16 37508.44      Black 490.53061              Contoso\n404 233307.54 37508.44      Black 490.53061             Fabrikam\n405 176259.30 37508.44      Black 490.53061              Litware\n406 162556.72 37508.44      Black 490.53061    Northwind Traders\n407 219435.39 37508.44      Black 490.53061            Proseware\n408 181307.58 37508.44      Black 490.53061     Southridge Video\n409 196203.28 37508.44      Black 490.53061    The Phone Company\n410 194147.34 37508.44      Black 490.53061 Wide World Importers\n411 199034.87 37508.44      Black 502.69388             A. Datum\n412 212097.22 37508.44      Black 502.69388      Adventure Works\n413 211167.48 37508.44      Black 502.69388              Contoso\n414 236331.77 37508.44      Black 502.69388             Fabrikam\n415 179282.36 37508.44      Black 502.69388              Litware\n416 165580.44 37508.44      Black 502.69388    Northwind Traders\n417 222459.13 37508.44      Black 502.69388            Proseware\n418 184331.73 37508.44      Black 502.69388     Southridge Video\n419 199227.16 37508.44      Black 502.69388    The Phone Company\n420 197171.27 37508.44      Black 502.69388 Wide World Importers\n421 202059.04 37508.44      Black 514.85714             A. Datum\n422 215121.15 37508.44      Black 514.85714      Adventure Works\n423 214191.84 37508.44      Black 514.85714              Contoso\n424 239356.06 37508.44      Black 514.85714             Fabrikam\n425 182305.53 37508.44      Black 514.85714              Litware\n426 168604.25 37508.44      Black 514.85714    Northwind Traders\n427 225482.94 37508.44      Black 514.85714            Proseware\n428 187355.94 37508.44      Black 514.85714     Southridge Video\n429 202251.12 37508.44      Black 514.85714    The Phone Company\n430 200195.27 37508.44      Black 514.85714 Wide World Importers\n431 205083.26 37508.44      Black 527.02041             A. Datum\n432 218145.16 37508.44      Black 527.02041      Adventure Works\n433 217216.26 37508.44      Black 527.02041              Contoso\n434 242380.40 37508.44      Black 527.02041             Fabrikam\n435 185328.80 37508.44      Black 527.02041              Litware\n436 171628.13 37508.44      Black 527.02041    Northwind Traders\n437 228506.83 37508.44      Black 527.02041            Proseware\n438 190380.21 37508.44      Black 527.02041     Southridge Video\n439 205275.15 37508.44      Black 527.02041    The Phone Company\n440 203219.33 37508.44      Black 527.02041 Wide World Importers\n441 208107.54 37508.44      Black 539.18367             A. Datum\n442 221169.23 37508.44      Black 539.18367      Adventure Works\n443 220240.73 37508.44      Black 539.18367              Contoso\n444 245404.79 37508.44      Black 539.18367             Fabrikam\n445 188352.17 37508.44      Black 539.18367              Litware\n446 174652.08 37508.44      Black 539.18367    Northwind Traders\n447 231530.79 37508.44      Black 539.18367            Proseware\n448 193404.52 37508.44      Black 539.18367     Southridge Video\n449 208299.25 37508.44      Black 539.18367    The Phone Company\n450 206243.46 37508.44      Black 539.18367 Wide World Importers\n451 211131.87 37508.44      Black 551.34694             A. Datum\n452 224193.36 37508.44      Black 551.34694      Adventure Works\n453 223265.23 37508.44      Black 551.34694              Contoso\n454 248429.23 37508.44      Black 551.34694             Fabrikam\n455 191375.63 37508.44      Black 551.34694              Litware\n456 177676.09 37508.44      Black 551.34694    Northwind Traders\n457 234554.81 37508.44      Black 551.34694            Proseware\n458 196428.89 37508.44      Black 551.34694     Southridge Video\n459 211323.40 37508.44      Black 551.34694    The Phone Company\n460 209267.65 37508.44      Black 551.34694 Wide World Importers\n461 214156.25 37508.44      Black 563.51020             A. Datum\n462 227217.54 37508.44      Black 563.51020      Adventure Works\n463 226289.78 37508.44      Black 563.51020              Contoso\n464 251453.70 37508.44      Black 563.51020             Fabrikam\n465 194399.17 37508.44      Black 563.51020              Litware\n466 180700.16 37508.44      Black 563.51020    Northwind Traders\n467 237578.89 37508.44      Black 563.51020            Proseware\n468 199453.30 37508.44      Black 563.51020     Southridge Video\n469 214347.60 37508.44      Black 563.51020    The Phone Company\n470 212291.88 37508.44      Black 563.51020 Wide World Importers\n471 217180.67 37508.44      Black 575.67347             A. Datum\n472 230241.78 37508.44      Black 575.67347      Adventure Works\n473 229314.37 37508.44      Black 575.67347              Contoso\n474 254478.22 37508.44      Black 575.67347             Fabrikam\n475 197422.80 37508.44      Black 575.67347              Litware\n476 183724.29 37508.44      Black 575.67347    Northwind Traders\n477 240603.03 37508.44      Black 575.67347            Proseware\n478 202477.76 37508.44      Black 575.67347     Southridge Video\n479 217371.86 37508.44      Black 575.67347    The Phone Company\n480 215316.17 37508.44      Black 575.67347 Wide World Importers\n481 220205.13 37508.44      Black 587.83673             A. Datum\n482 233266.07 37508.44      Black 587.83673      Adventure Works\n483 232338.98 37508.44      Black 587.83673              Contoso\n484 257502.78 37508.44      Black 587.83673             Fabrikam\n485 200446.49 37508.44      Black 587.83673              Litware\n486 186748.48 37508.44      Black 587.83673    Northwind Traders\n487 243627.22 37508.44      Black 587.83673            Proseware\n488 205502.25 37508.44      Black 587.83673     Southridge Video\n489 220396.16 37508.44      Black 587.83673    The Phone Company\n490 218340.51 37508.44      Black 587.83673 Wide World Importers\n491 223229.63 37508.44      Black 600.00000             A. Datum\n492 236290.40 37508.44      Black 600.00000      Adventure Works\n493 235363.64 37508.44      Black 600.00000              Contoso\n494 260527.37 37508.44      Black 600.00000             Fabrikam\n495 203470.26 37508.44      Black 600.00000              Litware\n496 189772.71 37508.44      Black 600.00000    Northwind Traders\n497 246651.47 37508.44      Black 600.00000            Proseware\n498 208526.78 37508.44      Black 600.00000     Southridge Video\n499 223420.51 37508.44      Black 600.00000    The Phone Company\n500 221364.89 37508.44      Black 600.00000 Wide World Importers\n\n\nflowchart TD A –&gt; C{Predictions with ..} C –&gt;|counterfactual data| D[“counterfactual(duplicates data)”] D –&gt; counter[“predictions(,variables=list(var=c(0,1)))”] C –&gt;|averging effectsequally across a grid| E[“marginalmeans()”] C –&gt;|regressors at their/medians/mode/etc| G[Predict valuesregressors at contstant value] C –&gt; H[aggregate predictions] G –&gt;newdata[“predictions(,newdata=‘mean’)”] G –&gt;datagrid[“predictions(,datagrid(_numeric=mean) ) ”] datagrid–&gt;default[“predictions(,datagrid() )”] H –&gt;by[“predictions(,by=‘var’)”] H –&gt;avg_predictions[“avg_predictions(,by=‘var’)”] H –&gt;datagrid_by[“predictions(,newdata =datagrid(= mtcars$cyl, hp = c(90,100)),by=’var)”]",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Understanding a model outcome</span>"
    ]
  },
  {
    "objectID": "many_models.html",
    "href": "many_models.html",
    "title": "4  many_models",
    "section": "",
    "text": "4.1 Advanced features to super charge",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "many_models.html#advanced-features-to-super-charge",
    "href": "many_models.html#advanced-features-to-super-charge",
    "title": "4  many_models",
    "section": "",
    "text": "4.1.1 How to add a all to different subcomponents\n\nFor the dimension you are querying add a “All” component\npass this to bind_rows() to the original dataframe\n\n\ncsat_all &lt;- csat_named |&gt;\n  mutate(product = \"All\") |&gt;\n  bind_rows(csat_named) \n\n\ncsat_named_nested &lt;- csat_all %&gt;% \n  nest_by(product) %&gt;% \n  mutate(\n    data=list(data)\n    ,mod=list(lm(my_formula,data=data))\n    ,mod2=list(lm(csat~postal_rating,data=data))\n    ,modstat2=list(broom::glance(mod2))\n    ,res=list(broom::tidy(mod))\n    ,modstat=list(broom::glance(mod))\n    )\n\ncsat_named_nested %&gt;% \n  unnest(modstat2)\n\n# A tibble: 4 × 18\n# Groups:   product [4]\n  product  data     mod    mod2  r.squared adj.r.squared sigma statistic p.value\n  &lt;chr&gt;    &lt;list&gt;   &lt;list&gt; &lt;lis&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 All      &lt;tibble&gt; &lt;lm&gt;   &lt;lm&gt;   0.000121      -0.00801  1.22   0.0149    0.903\n2 advanced &lt;tibble&gt; &lt;lm&gt;   &lt;lm&gt;   0.0338         0.00259  1.16   1.08      0.306\n3 basic    &lt;tibble&gt; &lt;lm&gt;   &lt;lm&gt;   0.000194      -0.0198   1.20   0.00972   0.922\n4 premium  &lt;tibble&gt; &lt;lm&gt;   &lt;lm&gt;   0.00148       -0.0248   1.25   0.0564    0.814\n# ℹ 9 more variables: df &lt;dbl&gt;, logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;,\n#   deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;, res &lt;list&gt;, modstat &lt;list&gt;",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "many_models.html#how-to-dynamic-filter-datasets-or-augmented-based-on-user-input-conditions",
    "href": "many_models.html#how-to-dynamic-filter-datasets-or-augmented-based-on-user-input-conditions",
    "title": "4  many_models",
    "section": "4.2 how to dynamic filter datasets or augmented based on user input conditions",
    "text": "4.2 how to dynamic filter datasets or augmented based on user input conditions\n\nCreate a list of named arguments that would be passed on filter() - The names are will be used as row entries later on - Use TRUE to keep all rows (eg no filter) - If you want to to filter rows / data then you need to use expr() to capture the expression that would go directly into filter of the nested dataset - Write it as if you were directly filtering data in a regular filter, eg eval(cut==\"Fair\")\nUse expand_grid() to create pair of each nested table by the filter criteria\nIn the framing table use, create a new column with the names (using names()) of the list containing the filter object\nCreate a new column that filters the data set and evaluates the arguments filter(data,eval(filter_ls))\n\nRemember to use expr() for non logical arguments\nAlternative you can directly name the column names from the datamodel\n\nWhen doing additional modling on the data objects, it can be difficult to understand what has been done to each data object\n\ninstead of using list(lm(my_formula,data=data)) you can use rlang::list2({product}_{type}:=lm(my_formula,data=data)) which makes it easier to know what is going on\n\nYou can nest the formula arguments inside as well by creating a named list for the arguments and directly passing that through\nFrom there you can use eval() in lm() to execute the arguments\n\n\n4.2.1 Add section on how to do it more dynamically with glue::glue and expr()\n\nYou can use create strings use glue::glue to construct customer arguments\nThen use rlang::parse_expr()to execute that argument\n\n\nfilter_ls &lt;- list(\n  All = TRUE,\n  no_reactivate = expr(type != \"reactivate\")\n)\n\n\ncast_all_groups &lt;- csat_all %&gt;% \n  nest_by(product) %&gt;% \n  mutate(data=list(data)) %&gt;% \n  expand_grid(filter_ls) %&gt;% \n  mutate(\n    type=names(filter_ls)\n    ,.after = product\n    )\n\n\nnamed_formula &lt;- list2(standard=my_formula &lt;- csat ~ postal_rating + phone_rating + email_rating +\n  website_rating + shop_rating)\ncast_all_groups %&gt;% \n  rowwise() %&gt;% \n  mutate(\n    data=list(\n      filter(data,eval(filter_ls))\n      )\n    ,formula=named_formula\n    ,formula_name=names(named_formula)\n    ,.keep = \"unused\"\n  ) %&gt;% \n  mutate(\n    mod=list2(\"{product}_{type}\":=lm(eval(formula),data=data))\n    ,res=list2(\"{product}_{type}\":=broom::glance(mod))\n  ) %&gt;% unnest(res)\n\n# A tibble: 8 × 18\n  product  type    data     formula   formula_name mod   r.squared adj.r.squared\n  &lt;chr&gt;    &lt;chr&gt;   &lt;list&gt;   &lt;named l&gt; &lt;chr&gt;        &lt;nam&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 All      All     &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.134        0.0479\n2 All      no_rea… &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.180        0.0771\n3 advanced All     &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.112       -0.381 \n4 advanced no_rea… &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.330       -0.340 \n5 basic    All     &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.382        0.161 \n6 basic    no_rea… &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.465        0.221 \n7 premium  All     &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.185       -0.0867\n8 premium  no_rea… &lt;tibble&gt; &lt;formula&gt; standard     &lt;lm&gt;      0.156       -0.196 \n# ℹ 10 more variables: sigma &lt;dbl&gt;, statistic &lt;dbl&gt;, p.value &lt;dbl&gt;, df &lt;dbl&gt;,\n#   logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;, df.residual &lt;int&gt;,\n#   nobs &lt;int&gt;",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "many_models.html#dynamically-create-formulas-with-multiple-conditions",
    "href": "many_models.html#dynamically-create-formulas-with-multiple-conditions",
    "title": "4  many_models",
    "section": "4.3 Dynamically create formulas with multiple conditions",
    "text": "4.3 Dynamically create formulas with multiple conditions\n\nreformulate() is alternative way to create a model argument and can be directly used in a lm()\n\nreformulate(independent_vars,dependent_vars)\n\n\n\nlm(\n  reformulate(\n  termlabels = c(\"carat\",\"cut\",\"color\",\"x\")\n  ,response = \"price\"\n  ),data = diamonds\n  )\n\n\nCall:\nlm(formula = reformulate(termlabels = c(\"carat\", \"cut\", \"color\", \n    \"x\"), response = \"price\"), data = diamonds)\n\nCoefficients:\n(Intercept)        carat        cut.L        cut.Q        cut.C        cut^4  \n    1608.81     11041.86      1299.23      -571.01       364.52        49.40  \n    color.L      color.Q      color.C      color^4      color^5      color^6  \n   -1656.57      -773.38       -99.12        97.90      -149.88      -152.48  \n          x  \n   -1232.42  \n\n\n\nCreate vector of quoted column names and use expand grid to directly put them in the framing table\nFrom there you can directly reference the names\n\n\nindep_vars &lt;- c(\"postal_rating\",\n                \"phone_rating\",\n                \"email_rating\",\n                \"website_rating\",\n                \"shop_rating\")\ncsat_all %&gt;% \n  nest_by(product) %&gt;% \n  mutate(data=list(data)) %&gt;% \n  expand_grid(filter_ls,indep_vars) %&gt;% \n  mutate(\n    type=names(filter_ls)\n    ,.after = product\n    ) %&gt;% \n  rowwise() %&gt;% \n  mutate(\n    data=list(filter(data,eval(filter_ls)))\n    ,mod=list(lm(reformulate(termlabels=indep_vars,response=\"csat\"),data=data))\n    ,modstat=list(broom::glance(mod))\n  ) %&gt;% unnest(modstat)\n\n# A tibble: 40 × 18\n   product type     data     filter_ls  indep_vars mod   r.squared adj.r.squared\n   &lt;chr&gt;   &lt;chr&gt;    &lt;list&gt;   &lt;named li&gt; &lt;chr&gt;      &lt;lis&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 All     All      &lt;tibble&gt; &lt;lgl [1]&gt;  postal_ra… &lt;lm&gt;    1.21e-4      -0.00801\n 2 All     All      &lt;tibble&gt; &lt;lgl [1]&gt;  phone_rat… &lt;lm&gt;    5.48e-2       0.0470 \n 3 All     All      &lt;tibble&gt; &lt;lgl [1]&gt;  email_rat… &lt;lm&gt;    9.69e-5      -0.00778\n 4 All     All      &lt;tibble&gt; &lt;lgl [1]&gt;  website_r… &lt;lm&gt;    9.53e-3       0.00141\n 5 All     All      &lt;tibble&gt; &lt;lgl [1]&gt;  shop_rati… &lt;lm&gt;    5.04e-3      -0.00318\n 6 All     no_reac… &lt;tibble&gt; &lt;language&gt; postal_ra… &lt;lm&gt;    4.82e-4      -0.00972\n 7 All     no_reac… &lt;tibble&gt; &lt;language&gt; phone_rat… &lt;lm&gt;    5.87e-2       0.0488 \n 8 All     no_reac… &lt;tibble&gt; &lt;language&gt; email_rat… &lt;lm&gt;    1.26e-6      -0.00980\n 9 All     no_reac… &lt;tibble&gt; &lt;language&gt; website_r… &lt;lm&gt;    2.41e-2       0.0140 \n10 All     no_reac… &lt;tibble&gt; &lt;language&gt; shop_rati… &lt;lm&gt;    4.21e-3      -0.00605\n# ℹ 30 more rows\n# ℹ 10 more variables: sigma &lt;dbl&gt;, statistic &lt;dbl&gt;, p.value &lt;dbl&gt;, df &lt;dbl&gt;,\n#   logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;, df.residual &lt;int&gt;,\n#   nobs &lt;int&gt;\n\n\n\nReal strength is using this in combination with update() to dynamically update the arguments to include more and more arguments\nCreate baseline argument\nCreate named list of updated vars that you want to incremental add to argument\nCreate column of named arguments\nuse pattern update(base_formula,reformulate(c(“.”,update_vars)\n\n“.” says to take all original variables and ad c() and update vars to them\nNULL is wont update anything and is the baseline model\n\n\n\nmy_formula2 &lt;- csat ~ postal_rating + phone_rating + shop_rating\n\nupdate_vars &lt;- list2(base = NULL,\n                    email = \"email_rating\",\n                    website = \"website_rating+email_rating\")\n\n\ntest &lt;- csat_all %&gt;% \n  nest_by(product) %&gt;% \n  mutate(data=list(data)) %&gt;% \n  expand_grid(filter_ls,update_vars) %&gt;% \n  mutate(\n    type=names(filter_ls)\n    ,args=names(update_vars)\n    ,.after = type\n    ) %&gt;% \n  rowwise() %&gt;% \n  mutate(\n    form=list(\n      update(my_formula2,reformulate(c(\".\",update_vars),intercept = 0))\n    )\n    ,mod=list(\n      lm(form,data=data)\n    )\n    ,modstat=list(\n      broom::glance(mod)\n    )\n  ) %&gt;% \n  unnest(modstat)\n\nhead(test$form)\n\n[[1]]\ncsat ~ postal_rating + phone_rating + shop_rating - 1\n\n[[2]]\ncsat ~ postal_rating + phone_rating + shop_rating + email_rating - \n    1\n\n[[3]]\ncsat ~ postal_rating + phone_rating + shop_rating + website_rating + \n    email_rating - 1\n\n[[4]]\ncsat ~ postal_rating + phone_rating + shop_rating - 1\n\n[[5]]\ncsat ~ postal_rating + phone_rating + shop_rating + email_rating - \n    1\n\n[[6]]\ncsat ~ postal_rating + phone_rating + shop_rating + website_rating + \n    email_rating - 1",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "many_models.html#practice",
    "href": "many_models.html#practice",
    "title": "4  many_models",
    "section": "5.1 Practice",
    "text": "5.1 Practice\n\nlibrary(tidyverse)\n\nfilter_args &lt;- rlang::list2(All=TRUE,\n                     low_price=expr(price&lt;2000)\n                     ,med_price=expr(price&gt;2000&price&lt;12000)\n                     ,high_price=expr(price&gt;12000)\n                     )\n\n\ndiamonds %&gt;% \n  mutate(color=\"All\") %&gt;% \n  bind_rows(diamonds) %&gt;% \n  nest_by(color) %&gt;% \n  mutate(data=list(data)) %&gt;% \n  expand_grid(filter_args) %&gt;% \n  mutate(\n    filter_names=names(filter_args)\n    ) %&gt;% \n  rowwise() %&gt;% \n  mutate(\n    data=list(filter(data,eval(filter_args)))\n    ,.keep = \"unused\"\n  ) %&gt;% \n  mutate(\n    cor=list(cor(data$carat,data$price))\n    ) %&gt;% \n  unnest(cor) %&gt;% \n  select(color,filter_names,cor) %&gt;% \n  # pivot_wider(names_from=filter_names,values_from=cor) %&gt;% \n  echarts4r::e_charts(x=filter_names) %&gt;% \n  echarts4r::e_scatter(serie =cor,legend = TRUE) %&gt;% \n  # echarts4r::e_scatter(serie =low_price,symbol_size = 10) %&gt;% \n  # echarts4r::e_scatter(serie =high_price,symbol_size = 10) %&gt;% \n  echarts4r::e_visual_map(cor)\n\n\n\n\n\n\nlibrary(tidyverse)\ncum_sum_vec&lt;- c(\"price\",\"x\",\"y\",\"z\",\"carat\")\n\n input &lt;- \"sum(1:10)\"\n str(expr(input))\n\n symbol input\n\n eval(parse_expr(input))\n\n[1] 55\n\nargs_lst &lt;- rlang::list2(\n\nrlang::call2('cumsum',expr(price))\n\n  \n  )\n\n\ndiamonds %&gt;% \n  nest_by(cut) %&gt;%\n  mutate(data=list(data)) %&gt;% \n  expand_grid(input_args=cum_sum_vec) %&gt;% \n  mutate(args=glue::glue(\"cumsum({input_args})\")) %&gt;% \n  rowwise() %&gt;% \n  mutate(\n    data_mod=list(\n      mutate(data\n           ,\"{input_args}_cumsum\":=eval(parse_expr(args))\n             )\n      )\n  ) %&gt;% \n\npull(data_mod) %&gt;% .[[1]]\n\n# A tibble: 1,610 × 10\n   carat color clarity depth table price     x     y     z price_cumsum\n   &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;int&gt;\n 1  0.22 E     VS2      65.1    61   337  3.87  3.78  2.49          337\n 2  0.86 E     SI2      55.1    69  2757  6.45  6.33  3.52         3094\n 3  0.96 F     SI2      66.3    62  2759  6.27  5.95  4.07         5853\n 4  0.7  F     VS2      64.5    57  2762  5.57  5.53  3.58         8615\n 5  0.7  F     VS2      65.3    55  2762  5.63  5.58  3.66        11377\n 6  0.91 H     SI2      64.4    57  2763  6.11  6.09  3.93        14140\n 7  0.91 H     SI2      65.7    60  2763  6.03  5.99  3.95        16903\n 8  0.98 H     SI2      67.9    60  2777  6.05  5.97  4.08        19680\n 9  0.84 G     SI1      55.1    67  2782  6.39  6.2   3.47        22462\n10  1.01 E     I1       64.5    58  2788  6.29  6.21  4.03        25250\n# ℹ 1,600 more rows",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "many_models.html#reproduce-stackoverflow-posts",
    "href": "many_models.html#reproduce-stackoverflow-posts",
    "title": "4  many_models",
    "section": "5.2 Reproduce Stackoverflow posts",
    "text": "5.2 Reproduce Stackoverflow posts\n\nmake_data_fixed &lt;- function(df) {\n\n  df %&gt;% \n    mutate(price_cumsum=cumsum(price),\n           max_price_cumsum=max(price_cumsum))\n}\n\nmake_data_input &lt;- function(df,x) {\n  df %&gt;% \n    mutate(\"{{x}}_cumsum\":=cumsum({{x}}),\n           \"max_{{x}}_cumsum\":=max(\"{{x}}_cumsum\")\n           )\n}\n\nselected_cols &lt;- c(\"clarity\",\"depth\")\n\n\nlibrary(tidyverse)\n\ndiamonds %&gt;% \n  nest_by(cut) %&gt;% \n  mutate(data=list(data)) %&gt;% \n  mutate(mod=list(lm(price~carat,data=data)))\n\n# A tibble: 5 × 3\n# Rowwise:  cut\n  cut       data                  mod   \n  &lt;ord&gt;     &lt;list&gt;                &lt;list&gt;\n1 Fair      &lt;tibble [1,610 × 9]&gt;  &lt;lm&gt;  \n2 Good      &lt;tibble [4,906 × 9]&gt;  &lt;lm&gt;  \n3 Very Good &lt;tibble [12,082 × 9]&gt; &lt;lm&gt;  \n4 Premium   &lt;tibble [13,791 × 9]&gt; &lt;lm&gt;  \n5 Ideal     &lt;tibble [21,551 × 9]&gt; &lt;lm&gt;",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>many_models</span>"
    ]
  },
  {
    "objectID": "vim.html",
    "href": "vim.html",
    "title": "5  Vim",
    "section": "",
    "text": "5.1 What is VIM?\nVim is a keybinding that has a bit of cult following. It will look and feel different than your traditional key bindings (eg what is in front of your hands today) but over time, you will be will be more productive and efficient. Honestly – it will excite you.\nHow will VIM do this?\nThis will make more sense as we go along. VIM’s real secret is not only how is there a tool for every general or specialized use case but also you can access the built in short cuts or quickly create your own to use most of these tools with minimal hand movement.\nthe ability to “move mountains” while barely lifting your fingers from your keyboards homerow is incredible.\nSo how can I do more things, quickly, with fewer key strokes and less hand movement?\nThis is actually due to previous limitations in early computers where they didn’t have an up,down,left,right errors or other specialized keys (eg. ‘tab’, caps lock) so they had to leverage the existing keys to do many things.\nVIM’s trick in doing this is that it is not just simple text editor but instead it is a modular editor.\nThis means VIM has different modes (insert,normal, visual, command and replace) – each mode has a different “interface” which you can think of as surgeon’s tool kit that can be used for a focused purpose.",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#what-is-vim",
    "href": "vim.html#what-is-vim",
    "title": "5  Vim",
    "section": "",
    "text": "Getting started is the hardest because its new – The Primeagen\n\n\n\n\n\n\n\nWhat is a keybinding?\n\n\n\nI’ll use the word alot but you can think of a keybinding as a combination of keys that are pressed to do an outcome\nFor example ‘SHIFT + y’ produces the capital letter ‘Y’\n‘Alt + =’ will produce ‘&lt;-’ in Rstudio\nPression ‘Ctrl + left arrow’ will skip ahead left by one whole word",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#how-to-use-vim-in-rstudio-and-why",
    "href": "vim.html#how-to-use-vim-in-rstudio-and-why",
    "title": "5  Vim",
    "section": "5.2 How to use VIM in RStudio and why?",
    "text": "5.2 How to use VIM in RStudio and why?\nWhile VIM (or its alternative flavors) is its own program – due to popularity and benefits many of VIM’s key bindings are available in other editors, including Rstudio and VScode.\n\nOne limitation upfront, specifically in the case of RStudio is that only a selection of VIM’s key bindings are available – quite honestly you are missing a lot of VIM’s firepower – but for a beginner that wants to graduate to intermediate skill set – its actually a great place to start.\n\nAdditionally, everything you learn is 100% portable to a different editor.",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#why-learn-vim-in-rstudio",
    "href": "vim.html#why-learn-vim-in-rstudio",
    "title": "5  Vim",
    "section": "5.3 Why learn VIM in RStudio?",
    "text": "5.3 Why learn VIM in RStudio?\nGiven that you are essentially learning VIM lite – why go through with this at all? RStudio as its own shortcuts and utilities, what makes this so special for R users?\nIncremental benefits\n\n“Mark” sections of a your script, rmarkdown or quarto document and instantly transport there making navigation a breeze\nQuickly record keyboard macros to do repititive edits, deletions or insertions (think captializing first word of a list or replace ‘.’ with ’_’ in variable’s name,etc)\nSearch and replace letters or words without using your mouse\nInstantly jump to specific words or characters in a line\nNavigate your document with minimal handmovement – maximizing your ergnomic benefits\nHighlight words, lines paragarphs with precision",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#how-do-i-get-started",
    "href": "vim.html#how-do-i-get-started",
    "title": "5  Vim",
    "section": "5.4 How do I get started?",
    "text": "5.4 How do I get started?\nBefore we enable VIM in RStudio we need to talk about two key modes, how you switch between and interact with these modes\n\n5.4.1 Insert Mode\nThis will be the most familiar to you as this mode is basically the interface you are most used to today.\nYou press the letter “a” and you see the letter “a” printed on the screen. You want to move around, you press up arrow or left arrow,etc.\nThere is nothing controversial or hard to learn about this mode – this mode works as you are used to today.\nHowever, believe it or not – you will try to spend as little time in this mode as possible. That is because this mode should only be used to enter in text – not for navigation around your document or between paragraphas, not for highlighting words or sections, not for editing or deleting texts – you get the point.\nGetting out of the habit of using insert mode for nothing more than just inserting text will be an initial source of frustration\nThe real fun starts in what is known as ‘normal mode’ – which is the mode you will first start in which is used mainly for navigating around your document, neutral mode that you will transition to other modes from,\n\n\n\n\n\n\nTransfer from Insert mode to Normal mode\n\n\n\n\n\n\nTo get out of insert mode and switch to normal mode you need to press  or  +[. (note in real vim you can create new key mappings so that you can use any key combination to to escape mode). I recommend to start with esc but eventually you want to move towards  + [ because it should be less reaching for your pinky fingers.\n\n\n\n\nWhen you are in normal mode, at first glance everything will be the same – with one exception.\nyour cursor will look like a block rather than a slim line.\nThat is it.\nHowever when you start typing in normal mode that is when you will start to see differences. If you were to type b,t s or q nothing happens. That is because this mode isn’t intended to insert new texts instead it is meant motions and operators.\nTo move around in this mode you can theoritically still use the arrow keys but honestly the quicker you ditch that habit the better.\nInstead you use ‘hjk’ and ‘l’ to go ‘left’, ‘down’, ‘up’ and ‘right’ (respecively)\nThis is a great place for you to start your transformation to a VIM user. Coincidently it will be the same time when you also pull out your hair in frustration.\nYou use this mode to navigate around your spread sheet, move,change or delete words and line. To insert new text you need to be in insert mode.\n\n\n\n\n\n\nTransfer from Normal mode to Insert mode\n\n\n\n\n\nTo go into insert mode there are multiple options depending where in the word, paragraph or line you want the cursur to “jump” to. However in practice you will principlly be suing four letters to do so:\ni,a,s or o (or there are capital equivalents)\n\n\n\nSo lots of new information to you – lets recap some fundamentals.",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#recap",
    "href": "vim.html#recap",
    "title": "5  Vim",
    "section": "5.5 Recap",
    "text": "5.5 Recap\n\nIntroduced two of four modes so far and their main pursoes\n\ninsert is to insert text into your file (this will be the most familiar)\nnormal mode is to navigate around and between your file, delete, copy and paste words/sentences or paragraphes\n\nHow to switch between each mode\n\nPress  or  +[. to get out of insert mode to normal mode\nPress i,a,s or o to get out of normal mode into insert mode\n\n\nWhat can you do with this so far? - not alot –but patience my friend – we are establishing vocabulary and framework. - now you know enough to enable VIM keybindings in Rstudio\n\n\n\n\n\n\nHow to enable VIM in Rstudio?\n\n\n\n\n\n\nGo to “Global Options”\nSelect “Code”\nUnder keybindings select “VIM”\n\n\n\n\nIn RStudio VIM you will get a light flavor of the keybindings, no support for custom keybinds, a taste of the distinct modes, modest macro support and most search & replace functionality with no plugins from the open source community",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#resources",
    "href": "vim.html#resources",
    "title": "5  Vim",
    "section": "7.1 Resources",
    "text": "7.1 Resources\n\nolder book but good starting materials\ndunno\npragmatic key strokes – for intermediates",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#how-to-use-vim-if-you-are-in-a-windows-environment",
    "href": "vim.html#how-to-use-vim-if-you-are-in-a-windows-environment",
    "title": "5  Vim",
    "section": "8.1 How to use VIM if you are in a windows environment",
    "text": "8.1 How to use VIM if you are in a windows environment\n\nYour corporate enviorment may have allow you to have ‘Git BASH’ which is really helpful! because if you have that you have VIM!\nAlternatively your corporate environmetn may have Mysys",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#how-to-find-your-.vimrc-file",
    "href": "vim.html#how-to-find-your-.vimrc-file",
    "title": "5  Vim",
    "section": "8.2 How to find your .vimrc file",
    "text": "8.2 How to find your .vimrc file\nIn order to customize your vim file, you will need to have a vim configuration file, often times known as ‘vimrc’ file, however finding this file can be confusing at time.\nThe below are some helpful tips you can use run in vim to help find where your vim is sourcing your vimrc file\nNote, if your vimrc file doesn’t exist you can just create a new one\n\n:version ▶ tells you where VIM is sourcing the .vimrc file\n:echo $VIM ▶ to see the filepath tha vim is looking for the vimrc\n:source filepath ▶ to source a different vim file",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#setting-up-vim-first-time",
    "href": "vim.html#setting-up-vim-first-time",
    "title": "5  Vim",
    "section": "8.3 Setting up VIM first time",
    "text": "8.3 Setting up VIM first time\nBelow are helpful commands to set up in your vimrc to help making vim sing\nSet’s VIM so that it won’t be capitible with Vi\n\n:set nocompatible\n\n[Gives each line a number]\n\n:set number (nu)\n\n[Gives each line a number]\n\n:set relativenumber (rnu)\n\n[Gives each line a number]\n\n:set hlsearch ▶ highlight words in a search\n\n[Gives each line a number] - :set ruler ▶ provides row and column index [Gives each line a number] - :set autoindent [Gives each line a number] - :set incrsearch == incremental search [Gives each line a number] - :set autowrite ▶ automatic save [Gives each line a number] - set cursorline ▶ highlight current row [Gives each line a number] - set cursorcolumn ▶ highlight current column [Gives each line a number] - set showcmd [Gives each line a number] - set backspace=indent,eol,start [Gives each line a number] - set backup [Gives each line a number] - let mapleader = “&lt;space&gt;” ▶ map leader key [Gives each line a number] - nobell=all == turns off visual and audio bells [Gives each line a number]\n\n\n\n\n\n\nLeaderkey concept\n\n\n\nLeaderkey is a",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#additional-set-ups",
    "href": "vim.html#additional-set-ups",
    "title": "5  Vim",
    "section": "8.4 Additional set ups",
    "text": "8.4 Additional set ups\n\nThis will depend on your linux set up\nIf you are using a barebones linux setup you may require more set up lets go ## Mappings\n\n\n8.4.1 Mappings to decrease repititiveness\n\nimap jk  ▶ custom escape key (to jk)\ncrtl + P ▶ to auto fill from words already present in the sheet\n:xnoremap p pgvy ▶ paste, re-copies previous selection and yanks it again\n:abbreviate shortcut fullword ▶ set custom snippets\n:map  actions ▶ maps a key, simliar to a register\n. ▶ will repeat the last action\n\n\n\n8.4.2 Shortcuts\n\nnohl ▶ erases current highlights\n:marks [args] ▶ lists all marks\n\n’ ▶ the last place the cursor was at\n” ▶ line 1\n[ ▶ start of the last insert\n] ▶ this end of the insert\n\n:wnext ▶ save current file and go to nextfile\n:next! ▶ force next\n:first ▶ first file\n\n:last ▶ last file\n:Next ▶ go to previous\n:args ▶ current file that you are on\n:f ▶ will dispaly current file\n\n:put=range(start_num,end_num,inc) ▶ put range of numbers in script\n\nThis is probably better understood as a mimic of VIM key bindings but even this limited capabilities can signifcantly help your producively\n\n\n8.4.3 Key Navigation\n\nJ ▶ joins lines\n:t [row number] ▶ copies to row number\n:m [row_number] ▶ moves to row number\ngUU ▶ upper cases entire line\ng~~ ▶ inverts case of line\n{ ▶ up a section\n} ▶ down a section\n:Ex == Open up file explorer\ngj == navigate one visual line\ngk == navigate one visual line",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#patterns-to-know",
    "href": "vim.html#patterns-to-know",
    "title": "5  Vim",
    "section": "8.5 Patterns to know",
    "text": "8.5 Patterns to know\n\n8.5.1 Search\nVIM has very powefful search functionality with /\n\nUse the ‘/’ to search for a key word\nif multiple matches you can use ‘n’ to select the next option.\nor you can use ? to go back to a previous option\n\n\n\n8.5.2 Replace\n\n:[start_num,end_num]s/new_word/old_word/g ▶ replace a word\n\nstart_num,end_num ▶ can be replaced with %\ns – to substitute\ng ▶ indicates its a global so if it happens more than once to go replace it\nc ▶ confirm before change\n% or 1,$ ▶ full document\n\n\n\n\n8.5.3 Popular regex\n\n$ and ^ around single word will only find those words",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#registers-macros",
    "href": "vim.html#registers-macros",
    "title": "5  Vim",
    "section": "8.6 Registers (macros)",
    "text": "8.6 Registers (macros)\n\nStart recording with q\nAssign a letter to the macro\nDo your key bindings step by step\nq to stop macros\n(letter?) to call macro\nCan add count to do it muliple times",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#text-blocks-and-multiple-files",
    "href": "vim.html#text-blocks-and-multiple-files",
    "title": "5  Vim",
    "section": "8.7 Text blocks and multiple files",
    "text": "8.7 Text blocks and multiple files\n\nCutting, deleting and yanking a word puts it in the registrar\n\n\n8.7.1 Marks\n\nmark a spot with ‘m’ and a letter\nto go to a mark use ’ and the letter\n\nUseful to delete until a word d’a or to mark a frequently used section\n\n\n\n\n8.7.2 Filtering\n\n! + abs rows + G + command\n\n!10Gsort ▶ will sort the ten rows from currnet row to row 10\n!10Grev ▶ will rev the rows from point to line 10\n\n!! command ▶ to directly enter in a different comand\n\n!!ls ▶ lists files and folders\n!!pwd ▶ lists current directory\n!!date ▶ lists the current date",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#edit-multiple-files",
    "href": "vim.html#edit-multiple-files",
    "title": "5  Vim",
    "section": "8.8 Edit multiple files",
    "text": "8.8 Edit multiple files\n\nvim file1 file2\nthis will open up the first file to switch you need :write and :next or :wnext\n:args ▶will display the current file that you are on\n:f ▶ will display current file\ncrtl + ^ will get you",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#buffer-copy",
    "href": "vim.html#buffer-copy",
    "title": "5  Vim",
    "section": "8.9 Buffer Copy",
    "text": "8.9 Buffer Copy\n\n:[numberOfLines]split [file] ▶ split current file or named file-\n:new ▶ to open up a new buffer\n\n:bnext ▶ next buffer\n:bprevious ▶ previous buffer\n:vsplit [+/pattern]▶ for visual split to go pattern\nctrl+Ww ▶ -cycle through buffers\n:hide ▶ hide buffer\n:buffers ▶ list buffers\n:buffer [number] ▶ go to list of buffers",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#visual-basic-mode",
    "href": "vim.html#visual-basic-mode",
    "title": "5  Vim",
    "section": "8.10 Visual Basic Mode",
    "text": "8.10 Visual Basic Mode\n\nv starts line by line visual mode ▶ can only select line wise at a time\nV highlights the whole line\nvaw ▶ visualize around the word\nctrl + v enters visual block mode\nctrl + v + I  + escape ▶ insert text across multiple lines\n\nuse o to toggle between start and ending of visual search",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#digraph",
    "href": "vim.html#digraph",
    "title": "5  Vim",
    "section": "8.11 Digraph",
    "text": "8.11 Digraph\n\nctrl + k character character number\n\n• is ctrl+k oo\n▶ is cktrl+k RP",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "vim.html#misc.",
    "href": "vim.html#misc.",
    "title": "5  Vim",
    "section": "8.12 Misc.",
    "text": "8.12 Misc.\n\n&gt;&gt; shifts left &lt;&lt; shifts right\nset shiftwidth=number ▶ sets the shift command\n:numrange p ▶ print last lines\n:start_range,/search p ▶ print until a serached word ▶ also works with marks’\nctrl + v :’ ▶ will put range in and you can execute commands from there\no ▶ to insert space beneath the line\nO ▶ to insert space above the current line\ng ctrl-g == display words, lines and bytes\n\n:25t. – copies line 25 and pastes it below :t20 – copies current line and pastes it below line 20\nin insert mode ctrl+r+= and arthemtic operation to add calculator to vim copy, move, delete in norm mode\nt or co = copy m = move d = delete . = current line\nstart_range,end_rate,motion,line\ngi == last insert gv – last visual\nshift+k over bash command will open man pages\ngx – to open url (must have https://)\ng+ ctrl+g =count words, lines,etc\nctrl + a == incremental number ctrl+ x == decrease number",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Vim</span>"
    ]
  },
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "6  github",
    "section": "",
    "text": "6.1 Resources",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "github.html#resources",
    "href": "github.html#resources",
    "title": "6  github",
    "section": "",
    "text": "https://raps-with-r.dev/git.html\nhttps://happygitwithr.com/\nhttps://learngitbranching.js.org/?locale=en_US",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "github.html#connect-to-a-repo",
    "href": "github.html#connect-to-a-repo",
    "title": "6  github",
    "section": "9.1 connect to a repo",
    "text": "9.1 connect to a repo",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "github.html#pull-committ-and-push",
    "href": "github.html#pull-committ-and-push",
    "title": "6  github",
    "section": "9.2 pull, committ and push",
    "text": "9.2 pull, committ and push\ngit pull to pull latest copy from the origin Try to do this immediately as it makes merge conflicts less (in case you edit a file that is updated in the origin )\nThen you git add . too add all changed documents are specifically specific\nThen use git commit -m “message”`\n\nMake messages meaningful focuses on what and why – helps with merge\nYou can use git status to see status of things and git log to see past commands",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "github.html#reversing-undoing",
    "href": "github.html#reversing-undoing",
    "title": "6  github",
    "section": "9.3 reversing / undoing",
    "text": "9.3 reversing / undoing",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "github.html#branching-merging",
    "href": "github.html#branching-merging",
    "title": "6  github",
    "section": "9.4 branching / merging",
    "text": "9.4 branching / merging\nadd branch - git checkout branch \"branch name\"\ndelete branch\n\ngit brand -d \"branch name\"",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>github</span>"
    ]
  },
  {
    "objectID": "database.html#are-all-tables-equal",
    "href": "database.html#are-all-tables-equal",
    "title": "2  Database and Larger Than Memory Problems",
    "section": "4.4 Are all tables equal?",
    "text": "4.4 Are all tables equal?\nDatabase frameworks\n\nTemporary Tables / CTE\n\nThese are tables that only exist when you run them\nHelpful as interim steps or to break code into subqueries to make it more modular\n\n\n\nWITH TEMP AS (\n\nSELECT \nCUT\n,MEAN(PRICE) AS AVG_PRICE\n,COUNT(*) AS N\n\nFROM\nDIAMOND_DB\n\nGROUP BY\nCUT\n\n)\n\nSELECT *\nFROM\nDIAMOND_DB AS MAIN\n\nLEFT JOIN\nTEMP ON MAIN.CUT=TEMP.CUT\n\n)\n\n\nCurated tables\n\nOften times you may have loads of raw tables (eg 100s) that you need to join together, filter or aggregrate before the data can be usable\nThis process of turning raw /streaming data into table that can be consumed for analysis is oftern called data curation\nThis is often times created as a view which can be though of as particular snapshot of a table\n\n\n\nCREATE VIEW DiamondSummaryView AS\nWITH TEMP AS (\n    SELECT \n        CUT,\n        MEAN(PRICE) AS AVG_PRICE,\n        COUNT(*) AS N\n    FROM\n        DIAMONDS_DB\n    GROUP BY\n        CUT\n)\nSELECT *\nFROM\n    DIAMONDS_DB AS MAIN\nLEFT JOIN\n    TEMP ON MAIN.CUT = TEMP.CUT;\n\n\nMaterialized layers\n\nMaterialized layer means the data is more persistent so when you run it its not triggering the underlying queries (which will save you alot of time)\n\n\n\nCREATE MATERIALIZED VIEW DiamondSummaryMaterializedView AS\nWITH TEMP AS (\n    SELECT \n        CUT,\n        MEAN(PRICE) AS AVG_PRICE,\n        COUNT(*) AS N\n    FROM\n        DIAMONDS_DB\n    GROUP BY\n        CUT\n)\nSELECT *\nFROM\n    DIAMONDS_DB AS MAIN\nLEFT JOIN\n    TEMP ON MAIN.CUT = TEMP.CUT;\n\nDatabase structure\n\nSecurity Model\n\nBecause data can be privileged, without a doubt your organization has some security model that will aplly row level security and IDs to ensure when you access a table you are seeing what you should be seeing\nThere is way to much to write here about it and honestly, I’m not the right person to answer it\n\n\nYou may not need to know any of this but this mostly depends on your organizations data strategy, staffing levels and operating model\nDBI::dbCanConnect()",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Database and Larger Than Memory Problems</span>"
    ]
  },
  {
    "objectID": "tidyselect.html",
    "href": "tidyselect.html",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "",
    "text": "1.1 The whole game\nBy the end of the post you’ll know how to reference columns in a data frame based on the column’s:\ntibble::tribble(\n~verb,~description,\n\"colA:colZ\",\"Identifies all columns between Cols A through Z\"\n,\"colA,ColB\",\"Identifies unquoted column names\"\n,\"any_of(c('ColA','ColB'))\",\"identifies quoted names\"\n,\"all_of(c('ColA','ColB'))\",\"only returns columns if all names exist\"\n,\"contains('Col')\",\"Uses regex expression\"\n,\"starts_with('Col')\",\"retruns any column that starts with Col\"\n,\"ends_with('Col')\", \"returns any column that ends with Col\"\n,\"num_range('Col',1:10)\",\"returns any column starting with col followed by the numbers 1 through 10, eg col01,col02,etc\"\n,\"matches(Col*)\",\"returns a match using regex\"\n) |&gt; \n  gt::gt() |&gt; \n  gt::cols_label(\n  verb~md(\"**Verb**\")\n  ,description~md(\"**Description**\")\n  )\nIt will also be a great a application of the skill sets we covered already with objects (vectors, lists, subsetting)\nFor starters we will show how tidyselect verbs can be used with select(). These will equally apply to dplyr verb’s of relocate(), pivot_longer(), and pivot_wider().\nFor group_by() we will need to introduce a minor variation.\nWhen we get to the iteration section will show the verbs are used with filter() and mutate()\nOK Ready? Let’s get started!",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#the-whole-game",
    "href": "tidyselect.html#the-whole-game",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "",
    "text": "Location\nQuoted or unquoted name\nPattern in the name such a prefix, suffix or regex match\nThe column’s class\nIf the column meets a defined criteria (either in aggregate or per row)",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-using-unquoted-names",
    "href": "tidyselect.html#identify-a-column-using-unquoted-names",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.2 Identify a column using unquoted names",
    "text": "1.2 Identify a column using unquoted names\nThe simplest way to select a column is to simply type the column name without quotes. This works well if you don’t have too many columns or if the names aren’t too long.\nSimply type the name separated by columns. Additionally columns will return in the order that you type them.\nIf a column name has a space or special character, then you will need to quote the name.\n\niris |&gt; \n  select(\n1    Sepal.Length\n    ,Petal.Width\n    ,Species\n  ) |&gt; \n  head()\n\n\n1\n\nSimplify type the column names, without quotes separated by a ,\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n0.2\nsetosa\n\n\n4.9\n0.2\nsetosa\n\n\n4.7\n0.2\nsetosa\n\n\n4.6\n0.2\nsetosa\n\n\n5.0\n0.2\nsetosa\n\n\n5.4\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen to use “,’, or `\n\n\n\nFor the most part when referencing column names, ” and ’ are interchangeable.\nHowever for some names such those that start with numbers, you will need to use `\n\n\nAlternative you can use “:” to select columns in a series. This will select the columns on either side of “:” and every column between.\n\niris |&gt; \n  select(\n1    Sepal.Length:Petal.Length\n  ) |&gt; head()\n\n\n1\n\nThis will select all the columns between Sepal.Length and Petal.Length (inclusive)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\n\n\n\n\n5.1\n3.5\n1.4\n\n\n4.9\n3.0\n1.4\n\n\n4.7\n3.2\n1.3\n\n\n4.6\n3.1\n1.5\n\n\n5.0\n3.6\n1.4\n\n\n5.4\n3.9\n1.7",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-using-quoted-names",
    "href": "tidyselect.html#identify-a-column-using-quoted-names",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.3 Identify a column using quoted names",
    "text": "1.3 Identify a column using quoted names\nSometimes, you may generate or write the names in a separate character vector. If you want to pass these quoted names (or strings) then simply use either any_of() or all_of().\nany_of() will return any columns that match and won’t return an error if you pass a column that doesn’t exist.\nall_of() will return the column names but will return an error if the column name doesn’t exist in the table\n\nvec &lt;- c(\"Species\",\"Sepal.Length\",\"does_not_exist\")\n\niris |&gt; \n  select(\n1    any_of(vec)\n  ) |&gt; \n  head()\n\n\n1\n\npass a vector quoted names, this will return any of the names that match the columns in the dataframe\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nSepal.Length\n\n\n\n\nsetosa\n5.1\n\n\nsetosa\n4.9\n\n\nsetosa\n4.7\n\n\nsetosa\n4.6\n\n\nsetosa\n5.0\n\n\nsetosa\n5.4\n\n\n\n\n\n\n\n\n\niris |&gt; \n  select(\n1    all_of(vec)\n  ) |&gt; \n  head()\n\n\n1\n\nThis will return an error because “does_not_exist” isn’t in in the iris data column ” Error in all_of(): ! Can’t subset columns that don’t exist. ✖ Column does_not_exist doesn’t exist. Backtrace:\n\n\n\n\nWhen reading the error we can see the comment “Column ’does_not_exist` doesn’t exist.”\nSometimes it will make sense to set up the column names as strings ahead of time or use programmatic techniques to create a series of colnames or test if a table has a columm name, etc.",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-using-quoted-names-1",
    "href": "tidyselect.html#identify-a-column-using-quoted-names-1",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.4 Identify a column using quoted names",
    "text": "1.4 Identify a column using quoted names\nSimple put the number position of the column starting with 1 as the first column.\nYou can use “:” if you have a series of consecutive numbers eg. 1:5 is 1,2,3,4,5.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\n\n\n\n\n5.1\n3.5\n1.4\n\n\n4.9\n3.0\n1.4\n\n\n4.7\n3.2\n1.3\n\n\n4.6\n3.1\n1.5\n\n\n5.0\n3.6\n1.4\n\n\n5.4\n3.9\n1.7\n\n\n\n\n\n\n\n\n\niris |&gt; \n  select(2:4,5) |&gt; #&lt;1&gt; selects the second through fourth column and fifth column\n  head()\n\n\niris |&gt; \n1  select(1:3) |&gt;\n  head()\n\n\n1\n\nselects the second through fourth column and fifth column\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n3.5\n1.4\n0.2\nsetosa\n\n\n3.0\n1.4\n0.2\nsetosa\n\n\n3.2\n1.3\n0.2\nsetosa\n\n\n3.1\n1.5\n0.2\nsetosa\n\n\n3.6\n1.4\n0.2\nsetosa\n\n\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\nIf you want to select the last column of a data frame then you can use last_col() which will select the last column. This is particularly useful when combined with relocate() to move a column you just added to the beginning of the table so that you can see its results.\nlast_col() when used without any other argument simply returns the last column.\nIf you want to return the second to last, third to last from the end then use the offset argument. If you want to reference the last column, then offset is 0 (the default), the second from last is 1, third to last is 2 etc.1.\nIf you want to pass along a different set of column names to reference you pass them along to “vars” and the argument and the offset will work off of those.\n\niris |&gt; \n  select(\n1    last_col()\n  ) |&gt; \n  head()\n\n\n1\n\nselects the last column\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\n\n\n\n\nsetosa\n\n\nsetosa\n\n\nsetosa\n\n\nsetosa\n\n\nsetosa\n\n\nsetosa\n\n\n\n\n\n\n\n\n\niris |&gt; \n  select(\n1    last_col(offset=2)\n  ) |&gt; \n  head()\n\n\n1\n\nselects the third column from the end\n\n\n\n\n\n\n\n\n\n\n\n\n\nPetal.Length\n\n\n\n\n1.4\n\n\n1.4\n\n\n1.3\n\n\n1.5\n\n\n1.4\n\n\n1.7\n\n\n\n\n\n\n\n\n\niris |&gt; \n  select(\n1    1:last_col(offset=2)\n  ) |&gt; \n  head()\n\n\n1\n\nselects the first through third column offset from the end (also the third column)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\n\n\n\n\n5.1\n3.5\n1.4\n\n\n4.9\n3.0\n1.4\n\n\n4.7\n3.2\n1.3\n\n\n4.6\n3.1\n1.5\n\n\n5.0\n3.6\n1.4\n\n\n5.4\n3.9\n1.7",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-using-patterns-in-the-column-name",
    "href": "tidyselect.html#identify-a-column-using-patterns-in-the-column-name",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.5 Identify a column using patterns in the column name",
    "text": "1.5 Identify a column using patterns in the column name\nIf you want to return a column whose names match a pattern then you need the below functions. These are most useful when you have a consistent naming convention\n\nstarts_with() matches any columns that starts with the given pattern\nends_with() matches any columns that ends with the given pattern\ncontains() matches any columns that contain the given pattern (no matter where in the column they appear)\nnum_range() matches a column that has a character and numeric pattern (either has prefix or suffix eg. wk4, wk5, wk6, etc)\nmatches() matches column according to any regex pattern\n\n\n#delcare variables\n\niris |&gt; \n  select(\n    starts_with(\"Sepal\")\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\n\n\n\n\n5.1\n3.5\n\n\n4.9\n3.0\n\n\n4.7\n3.2\n\n\n4.6\n3.1\n\n\n5.0\n3.6\n\n\n5.4\n3.9\n\n\n\n\n\n\n\n\n\n#delcare variables\n\niris |&gt; \n  select(\n    ends_with(\"Width\")\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nSepal.Width\nPetal.Width\n\n\n\n\n3.5\n0.2\n\n\n3.0\n0.2\n\n\n3.2\n0.2\n\n\n3.1\n0.2\n\n\n3.6\n0.2\n\n\n3.9\n0.4\n\n\n\n\n\n\n\n\n\n#delcare variables\n\nstarwars |&gt;\n  select(\n    contains(\"_\")\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nhair_color\nskin_color\neye_color\nbirth_year\n\n\n\n\nblond\nfair\nblue\n19.0\n\n\nNA\ngold\nyellow\n112.0\n\n\nNA\nwhite, blue\nred\n33.0\n\n\nnone\nwhite\nyellow\n41.9\n\n\nbrown\nlight\nbrown\n19.0\n\n\nbrown, grey\nlight\nblue\n52.0\n\n\n\n\n\n\n\n\n\ndatasets::LifeCycleSavings |&gt; \n  select(\n    num_range(\n      prefix=\"pop\"\n      ,range = 15:76\n    )\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\npop15\npop75\n\n\n\n\n29.35\n2.87\n\n\n23.32\n4.41\n\n\n23.80\n4.43\n\n\n41.89\n1.67\n\n\n42.19\n0.83\n\n\n31.72\n2.85",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-based-on-a-summarized-attritube-of-the-column",
    "href": "tidyselect.html#identify-a-column-based-on-a-summarized-attritube-of-the-column",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.6 Identify a column based on a summarized attritube of the column",
    "text": "1.6 Identify a column based on a summarized attritube of the column\nDown the road you will need to identify columns that meet a certain condition. Often times you will need to set up your condition so that a test can be evaluated to either TRUE or FALSE.\nSo how to do that? A common pattern is to summarize a column to single attribute, say its mean, count, number of distinct values, max, median, most frequent value, number of distinct values, etc and test if that exceeds, equals or falls short of some threshold (or between a range, etc)\nYou will be combining your function building skill sets to make what are called predicate functions2\nTo do this in tidy select you wrap your predicate function in the where() which will evaluate each column against the condition and will return the ones that pass.\nDon’t know where to start? Instead of building our own let us use some existing functions that check a column based on its class of data:\n\nis.factor()\nis.numeric()\nis.Date()\nis.character()\n\nCommon aggregation functions are below. Basically any function that return a single value - mean() - length() - unique() - distinct_n() - median() - max() - min()\n\ndiamonds %&gt;%\n  select(\n1    where(is.numeric)\n    ) |&gt; \n  head()\n\n\n1\n\nchecks each column with is.numeric() and if TRUE will return those column names to be selected\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0.23\n61.5\n55\n326\n3.95\n3.98\n2.43\n\n\n0.21\n59.8\n61\n326\n3.89\n3.84\n2.31\n\n\n0.23\n56.9\n65\n327\n4.05\n4.07\n2.31\n\n\n0.29\n62.4\n58\n334\n4.20\n4.23\n2.63\n\n\n0.31\n63.3\n58\n335\n4.34\n4.35\n2.75\n\n\n0.24\n62.8\n57\n336\n3.94\n3.96\n2.48\n\n\n\n\n\n\n\n\n\ndiamonds |&gt; \n  select(\n1    where(\\(x) is.factor(x))\n  ) |&gt; \n  head()\n\n\n1\n\nselects any columns that is.factor returns TRUE\n\n\n\n\n# A tibble: 6 × 3\n  cut       color clarity\n  &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;  \n1 Ideal     E     SI2    \n2 Premium   E     SI1    \n3 Good      E     VS1    \n4 Premium   I     VS2    \n5 Good      J     SI2    \n6 Very Good J     VVS2   \n\n\n\n\n\n\n\n\n\n\n\ncut\ncolor\nclarity\n\n\n\n\nIdeal\nE\nSI2\n\n\nPremium\nE\nSI1\n\n\nGood\nE\nVS1\n\n\nPremium\nI\nVS2\n\n\nGood\nJ\nSI2\n\n\nVery Good\nJ\nVVS2\n\n\n\n\n\n\n\n\nBuilt in predicate functions are great. But often times you will need to build you own. Don’t be intimidate, the below framework will significantly help you.\nWhat if we want to test if the column’s average value is greater than 300?\n\ndiamonds |&gt; \n  select(\n  where(\\(x) is.numeric(x) & mean(x) &gt; 300)\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nprice\n\n\n\n\n326\n\n\n326\n\n\n327\n\n\n334\n\n\n335\n\n\n336\n\n\n\n\n\n\n\n\n\ndiamonds |&gt; \n  select(\n    where(\n      \\(x) length(unique(x))&lt;10)\n      ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\ncut\ncolor\nclarity\n\n\n\n\nIdeal\nE\nSI2\n\n\nPremium\nE\nSI1\n\n\nGood\nE\nVS1\n\n\nPremium\nI\nVS2\n\n\nGood\nJ\nSI2\n\n\nVery Good\nJ\nVVS2\n\n\n\n\n\n\n\n\nUltimately the pattern is simple.\nTake a column\n\ndiamonds |&gt; \n  select(price)|&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nprice\n\n\n\n\n326\n\n\n326\n\n\n327\n\n\n334\n\n\n335\n\n\n336\n\n\n\n\n\n\n\n\napply your aggregation test to it\n\ntable(diamonds$price) |&gt; which.max() |&gt; unname() &gt;200\n\n[1] TRUE\n\n\nnow wrap that in a function, replace your table and column reference with x\n\ndiamonds |&gt; \n  select(\n    where(\\(x) table(x) |&gt; which.max() |&gt; unname() &gt; 200)\n  ) |&gt; \n  head()\n\n\n\n\n\n\n\n\n\n\nprice\n\n\n\n\n326\n\n\n326\n\n\n327\n\n\n334\n\n\n335\n\n\n336",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#identify-a-column-based-on-the-indviduals-rows-of-a-column",
    "href": "tidyselect.html#identify-a-column-based-on-the-indviduals-rows-of-a-column",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.7 Identify a column based on the indviduals rows of a column",
    "text": "1.7 Identify a column based on the indviduals rows of a column\nSimilar to the step above, we also use where() to set a testing condition and pass each column through that condition. The only nuance here is how you set that condition so that it works against each row vs. a single summarized attribute of that column.\nSo instead of return a single value mean(x) &lt;300 which return a single TRUE or FALSE instead will do a test of x &lt;300 which will evaluate the test against every row returning a series of TRUE or FALSE.\nYou still need a single TRUE or FALSE, so from there depending on what you want, you typically use any() or all() to return a final TRUE or FALSE for selection\nCommon predicate functions that are useful when doing row level validation are:\nany() all() some() none() every()\n\nmtcars |&gt; \n  select(\n    where(\n      \\(x) every(x,\\(x) x&lt;4)\n          )\n    ) |&gt; \n  head()\n\n                  vs am\nMazda RX4          0  1\nMazda RX4 Wag      0  1\nDatsun 710         1  1\nHornet 4 Drive     1  0\nHornet Sportabout  0  0\nValiant            1  0\n\n\n\nmtcars |&gt; \n  select(\n    where(\n      \\(x) every(x,\\(x) x&lt;4)\n          )\n    ) |&gt; \n  head()\n\n                  vs am\nMazda RX4          0  1\nMazda RX4 Wag      0  1\nDatsun 710         1  1\nHornet 4 Drive     1  0\nHornet Sportabout  0  0\nValiant            1  0\n\n\n\nmtcars |&gt; \n  select(\n    where(\n      \\(x) none(x,\\(x) x&lt;4)\n          )\n    ) |&gt; \n  head()\n\n                   mpg cyl disp  hp  qsec\nMazda RX4         21.0   6  160 110 16.46\nMazda RX4 Wag     21.0   6  160 110 17.02\nDatsun 710        22.8   4  108  93 18.61\nHornet 4 Drive    21.4   6  258 110 19.44\nHornet Sportabout 18.7   8  360 175 17.02\nValiant           18.1   6  225 105 20.22\n\n\n\nmtcars |&gt; \n  select(\n    where(\n      \\(x) none(x,\\(x) x&lt;4)\n          )\n    ) |&gt; \n  head()\n\n                   mpg cyl disp  hp  qsec\nMazda RX4         21.0   6  160 110 16.46\nMazda RX4 Wag     21.0   6  160 110 17.02\nDatsun 710        22.8   4  108  93 18.61\nHornet 4 Drive    21.4   6  258 110 19.44\nHornet Sportabout 18.7   8  360 175 17.02\nValiant           18.1   6  225 105 20.22",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#rounding-out",
    "href": "tidyselect.html#rounding-out",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "1.8 rounding out",
    "text": "1.8 rounding out\nWe will use tidyselect verbs alot but to round out this chapter, lets also introduce some minor additions\npick()\nAlthough we have tidyselect verbs that we can use in select() what if you want to use them in group_by() or filter()\nFor these verbs we will need to wrap the tidyselect verbs in pick() and then they will work!\n\ndiamonds |&gt; \n  group_by(\n    pick(where(is.factor))\n  ) |&gt; \n  summarize(\n    n=n()\n    ,.groups=\"drop\"\n  )\n\n# A tibble: 276 × 4\n   cut   color clarity     n\n   &lt;ord&gt; &lt;ord&gt; &lt;ord&gt;   &lt;int&gt;\n 1 Fair  D     I1          4\n 2 Fair  D     SI2        56\n 3 Fair  D     SI1        58\n 4 Fair  D     VS2        25\n 5 Fair  D     VS1         5\n 6 Fair  D     VVS2        9\n 7 Fair  D     VVS1        3\n 8 Fair  D     IF          3\n 9 Fair  E     I1          9\n10 Fair  E     SI2        78\n# ℹ 266 more rows\n\n\n\ndiamonds |&gt; \n  group_by(\n    pick(where(is.factor))\n  ) |&gt; \n  summarize(\n    n=n()\n    ,.groups=\"drop\"\n  ) |&gt; \n  head() |&gt; \n  gt::gt()\n\n\n\n\n\n\n\n\ncut\ncolor\nclarity\nn\n\n\n\n\nFair\nD\nI1\n4\n\n\nFair\nD\nSI2\n56\n\n\nFair\nD\nSI1\n58\n\n\nFair\nD\nVS2\n25\n\n\nFair\nD\nVS1\n5\n\n\nFair\nD\nVVS2\n9\n\n\n\n\n\n\n\n\n\ndiamonds |&gt; \n  filter(\n    all(pick(x:z)&gt;-1)\n  )\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  },
  {
    "objectID": "tidyselect.html#footnotes",
    "href": "tidyselect.html#footnotes",
    "title": "1  Tidy Select Verbs (Basic)",
    "section": "",
    "text": "One of the rare times where you will index from zero↩︎\nfancy name for a function that returns TRUE or FALSE↩︎",
    "crumbs": [
      "Misc",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Tidy Select Verbs (Basic)</span>"
    ]
  }
]